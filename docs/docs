------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Spring API Gateway
-------------------

cd api-gateway/

./mvnw clean install
./mvnw spring-boot:run

DB
----

# Set up sqlite DB connection and schema
go run initdb.go db_setup.go

# Check if DB and schema created
sqlite3 reports/data.db

Rule-engine
------------
python3 detect_test.py -s ../test -r rules -v --log-file debug.log --use-semgrep-registry

# Build go scanner binary
./build.sh

# Test if binary working
./detect --source=../test/


Rule-engine/API Gateway
------------------------

# Trigger vulnerability scanner 

curl -u user:secret -X POST http://localhost:8080/api/scan/trigger \
-H "Content-Type: application/json" \
-d '{
  "sourceDir": "/home/arjun/Desktop/J-Sentinel/test",
  "rulesDir": "/home/arjun/Desktop/J-Sentinel/rule-engine/rules",
  "timeout": 300,
  "useSemgrep": false
}'


Tracking
---------
# 1. Get all scans in-memory
curl -u user:secret http://localhost:8080/api/scans

# 2. Get specific scan metadata (by scanID) 
curl -u user:secret http://localhost:8080/api/scans/2a96d0e7-c8d2-4efd-8526-a552fb46f421/metadata

# 3. Get specific scan report (by scanID) 
curl -u user:secret http://localhost:8080/api/scans/2a96d0e7-c8d2-4efd-8526-a552fb46f421/report

History
---------
# 1. Get all scan history (with basic auth)
curl -u user:secret -X GET http://localhost:8080/api/history/scans

# 2. Get specific directory history (URL encoded path)
curl -u user:secret -X GET "http://localhost:8080/api/history/directory/%2Fprojects%2Fmyapp"

# 3. Alternative with jq for pretty-printed JSON
curl -s -u user:secret http://localhost:8080/api/history/scans | jq

# 4. With verbose output to debug
curl -v -u user:secret -X GET http://localhost:8080/api/history/scans


