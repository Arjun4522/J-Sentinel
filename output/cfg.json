{
  "nodes": [
    {
      "name": "readAndProcess",
      "id": 3,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "hasElse": false,
      "condition": "line != null",
      "id": 15,
      "type": "IF_STATEMENT"
    },
    {
      "hasFinallyBlock": false,
      "catchClausesCount": 1,
      "exceptionTypes": ["IOException"],
      "id": 18,
      "type": "TRY_CATCH_BLOCK"
    },
    {
      "name": "writeToLogFile",
      "id": 20,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "hasFinallyBlock": false,
      "catchClausesCount": 1,
      "exceptionTypes": ["IOException"],
      "id": 31,
      "type": "TRY_CATCH_BLOCK"
    },
    {
      "name": "main",
      "id": 33,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "name": "run",
      "id": 47,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "hasElse": false,
      "condition": "line != null",
      "id": 60,
      "type": "IF_STATEMENT"
    },
    {
      "hasFinallyBlock": true,
      "catchClausesCount": 1,
      "exceptionTypes": ["IOException"],
      "id": 65,
      "type": "TRY_CATCH_BLOCK"
    },
    {
      "name": "process",
      "id": 67,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "hasElse": true,
      "condition": "\"start\".equals(input)",
      "id": 74,
      "type": "IF_STATEMENT"
    },
    {
      "name": "main",
      "id": 78,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "name": "processSafeInput",
      "id": 91,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "hasElse": false,
      "condition": "userInput == null || userInput.isEmpty()",
      "id": 104,
      "type": "IF_STATEMENT"
    },
    {
      "hasElse": true,
      "condition": "sanitized.length() > 0",
      "id": 105,
      "type": "IF_STATEMENT"
    },
    {
      "id": 111,
      "type": "RETURN_STATEMENT"
    },
    {
      "name": "main",
      "id": 112,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "name": "start",
      "id": 125,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "name": "transform",
      "id": 130,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "String"
    },
    {
      "hasElse": false,
      "condition": "input == null",
      "id": 134,
      "type": "IF_STATEMENT"
    },
    {
      "expression": "\"default\"",
      "id": 136,
      "type": "RETURN_STATEMENT"
    },
    {
      "expression": "input.toUpperCase()",
      "id": 137,
      "type": "RETURN_STATEMENT"
    },
    {
      "name": "logData",
      "id": 138,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "hasElse": false,
      "condition": "data.length() > 10",
      "id": 146,
      "type": "IF_STATEMENT"
    },
    {
      "name": "main",
      "id": 149,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    }
  ],
  "scanId": "0ccab694-c850-41bd-9258-8711863472cf",
  "edges": [
    {
      "source": 1,
      "type": "CONTAINS",
      "target": 2
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 3
    },
    {
      "source": 3,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 15
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 20
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 33
    },
    {
      "source": 45,
      "type": "CONTAINS",
      "target": 46
    },
    {
      "source": 46,
      "type": "CONTAINS",
      "target": 47
    },
    {
      "source": 47,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 60
    },
    {
      "source": 46,
      "type": "CONTAINS",
      "target": 67
    },
    {
      "source": 67,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 74
    },
    {
      "source": 46,
      "type": "CONTAINS",
      "target": 78
    },
    {
      "source": 89,
      "type": "CONTAINS",
      "target": 90
    },
    {
      "source": 90,
      "type": "CONTAINS",
      "target": 91
    },
    {
      "source": 91,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 104
    },
    {
      "source": 91,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 105
    },
    {
      "source": 91,
      "type": "CONTAINS",
      "target": 111
    },
    {
      "source": 90,
      "type": "CONTAINS",
      "target": 112
    },
    {
      "source": 123,
      "type": "CONTAINS",
      "target": 124
    },
    {
      "source": 124,
      "type": "CONTAINS",
      "target": 125
    },
    {
      "source": 124,
      "type": "CONTAINS",
      "target": 130
    },
    {
      "source": 130,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 134
    },
    {
      "source": 130,
      "type": "CONTAINS",
      "target": 136
    },
    {
      "source": 130,
      "type": "CONTAINS",
      "target": 137
    },
    {
      "source": 124,
      "type": "CONTAINS",
      "target": 138
    },
    {
      "source": 138,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 146
    },
    {
      "source": 124,
      "type": "CONTAINS",
      "target": 149
    }
  ],
  "type": "ControlFlowGraph",
  "statistics": {
    "totalEdges": 26,
    "totalNodes": 25
  }
}