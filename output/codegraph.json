{
  "nodes": [
    {
      "name": "SQLi.java",
      "id": 1,
      "type": "FILE"
    },
    {
      "name": "TaintTestSuite",
      "id": 2,
      "type": "CLASS"
    },
    {
      "name": "doGet",
      "id": 3,
      "type": "METHOD",
      "parameters": 2,
      "returnType": "void"
    },
    {
      "dataType": "HttpServletRequest",
      "name": "req",
      "id": 4,
      "type": "PARAMETER"
    },
    {
      "dataType": "HttpServletResponse",
      "name": "res",
      "id": 5,
      "type": "PARAMETER"
    },
    {
      "dataType": "String",
      "name": "userInput",
      "id": 6,
      "type": "LOCAL_VARIABLE",
      "initializer": "req.getParameter(\"input\")"
    },
    {
      "dataType": "Connection",
      "name": "conn",
      "id": 7,
      "type": "LOCAL_VARIABLE",
      "initializer": "getConnection()"
    },
    {
      "dataType": "Statement",
      "name": "stmt",
      "id": 8,
      "type": "LOCAL_VARIABLE",
      "initializer": "conn.createStatement()"
    },
    {
      "dataType": "String",
      "name": "sql",
      "id": 9,
      "type": "LOCAL_VARIABLE",
      "initializer": "\"SELECT * FROM users WHERE username = '\" + userInput + \"'\""
    },
    {
      "dataType": "PreparedStatement",
      "name": "ps",
      "id": 10,
      "type": "LOCAL_VARIABLE",
      "initializer": "conn.prepareStatement(\"SELECT * FROM users WHERE username = ?\")"
    },
    {
      "dataType": "FileWriter",
      "name": "fw",
      "id": 11,
      "type": "LOCAL_VARIABLE",
      "initializer": "new FileWriter(\"files/\" + userInput)"
    },
    {
      "dataType": "ObjectInputStream",
      "name": "ois",
      "id": 12,
      "type": "LOCAL_VARIABLE",
      "initializer": "new ObjectInputStream(new ByteArrayInputStream(userInput.getBytes()))"
    },
    {
      "dataType": "Object",
      "name": "o",
      "id": 13,
      "type": "LOCAL_VARIABLE",
      "initializer": "ois.readObject()"
    },
    {
      "dataType": "String",
      "name": "cleanInput",
      "id": 14,
      "type": "LOCAL_VARIABLE",
      "initializer": "sanitize(userInput)"
    },
    {
      "dataType": "Statement",
      "name": "safeStmt",
      "id": 15,
      "type": "LOCAL_VARIABLE",
      "initializer": "conn.createStatement()"
    },
    {
      "scope": "req",
      "name": "getParameter",
      "arguments": 1,
      "id": 16,
      "type": "METHOD_CALL"
    },
    {
      "scope": "System.out",
      "name": "println",
      "arguments": 1,
      "id": 17,
      "type": "METHOD_CALL"
    },
    {
      "name": "getConnection",
      "arguments": 0,
      "id": 18,
      "type": "METHOD_CALL"
    },
    {
      "scope": "conn",
      "name": "createStatement",
      "arguments": 0,
      "id": 19,
      "type": "METHOD_CALL"
    },
    {
      "scope": "stmt",
      "name": "executeQuery",
      "arguments": 1,
      "id": 20,
      "type": "METHOD_CALL"
    },
    {
      "scope": "conn",
      "name": "prepareStatement",
      "arguments": 1,
      "id": 21,
      "type": "METHOD_CALL"
    },
    {
      "scope": "ps",
      "name": "setString",
      "arguments": 2,
      "id": 22,
      "type": "METHOD_CALL"
    },
    {
      "scope": "ps",
      "name": "executeQuery",
      "arguments": 0,
      "id": 23,
      "type": "METHOD_CALL"
    },
    {
      "scope": "Runtime.getRuntime()",
      "name": "exec",
      "arguments": 1,
      "id": 24,
      "type": "METHOD_CALL"
    },
    {
      "scope": "Runtime",
      "name": "getRuntime",
      "arguments": 0,
      "id": 25,
      "type": "METHOD_CALL"
    },
    {
      "scope": "fw",
      "name": "write",
      "arguments": 1,
      "id": 26,
      "type": "METHOD_CALL"
    },
    {
      "scope": "fw",
      "name": "close",
      "arguments": 0,
      "id": 27,
      "type": "METHOD_CALL"
    },
    {
      "scope": "Class",
      "name": "forName",
      "arguments": 1,
      "id": 28,
      "type": "METHOD_CALL"
    },
    {
      "scope": "userInput",
      "name": "getBytes",
      "arguments": 0,
      "id": 29,
      "type": "METHOD_CALL"
    },
    {
      "scope": "ois",
      "name": "readObject",
      "arguments": 0,
      "id": 30,
      "type": "METHOD_CALL"
    },
    {
      "name": "methodSink",
      "arguments": 1,
      "id": 31,
      "type": "METHOD_CALL"
    },
    {
      "name": "directFlow",
      "arguments": 1,
      "id": 32,
      "type": "METHOD_CALL"
    },
    {
      "name": "sanitize",
      "arguments": 1,
      "id": 33,
      "type": "METHOD_CALL"
    },
    {
      "scope": "conn",
      "name": "createStatement",
      "arguments": 0,
      "id": 34,
      "type": "METHOD_CALL"
    },
    {
      "scope": "safeStmt",
      "name": "executeQuery",
      "arguments": 1,
      "id": 35,
      "type": "METHOD_CALL"
    },
    {
      "className": "FileWriter",
      "arguments": 1,
      "id": 36,
      "type": "OBJECT_CREATION"
    },
    {
      "className": "ObjectInputStream",
      "arguments": 1,
      "id": 37,
      "type": "OBJECT_CREATION"
    },
    {
      "className": "ByteArrayInputStream",
      "arguments": 1,
      "id": 38,
      "type": "OBJECT_CREATION"
    },
    {
      "dataType": "ClassNotFoundException",
      "name": "e",
      "id": 39,
      "type": "TYPE_CATCH_CALL"
    },
    {
      "hasFinallyBlock": false,
      "catchClausesCount": 1,
      "exceptionTypes": [
        "ClassNotFoundException"
      ],
      "id": 39,
      "type": "TRY_CATCH_BLOCK"
    },
    {
      "dataType": "Exception",
      "name": "e",
      "id": 41,
      "type": "TYPE_CATCH_CALL"
    },
    {
      "hasFinallyBlock": false,
      "catchClausesCount": 1,
      "exceptionTypes": [
        "Exception"
      ],
      "id": 41,
      "type": "TRY_CATCH_BLOCK"
    },
    {
      "leftOperand": "\"User input: \"",
      "rightOperand": "userInput",
      "id": 43,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"SELECT * FROM users WHERE username = '\" + userInput",
      "rightOperand": "\"'\"",
      "id": 44,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"SELECT * FROM users WHERE username = '\"",
      "rightOperand": "userInput",
      "id": 45,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"SELECT * FROM users WHERE username = '\"",
      "rightOperand": "userInput",
      "id": 46,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"echo \"",
      "rightOperand": "userInput",
      "id": 47,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"files/\"",
      "rightOperand": "userInput",
      "id": 48,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"SELECT * FROM safe WHERE col = '\" + cleanInput",
      "rightOperand": "\"'\"",
      "id": 49,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"SELECT * FROM safe WHERE col = '\"",
      "rightOperand": "cleanInput",
      "id": 50,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"SELECT * FROM safe WHERE col = '\"",
      "rightOperand": "cleanInput",
      "id": 51,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "field": "out",
      "scope": "System",
      "id": 52,
      "type": "FIELD_ACCESS"
    },
    {
      "length": 5,
      "id": 53,
      "type": "STRING_LITERAL",
      "value": "input"
    },
    {
      "length": 12,
      "id": 54,
      "type": "STRING_LITERAL",
      "value": "User input: "
    },
    {
      "length": 38,
      "id": 55,
      "type": "STRING_LITERAL",
      "value": "SELECT * FROM users WHERE username = '"
    },
    {
      "length": 1,
      "id": 56,
      "type": "STRING_LITERAL",
      "value": "'"
    },
    {
      "length": 38,
      "id": 57,
      "type": "STRING_LITERAL",
      "value": "SELECT * FROM users WHERE username = ?"
    },
    {
      "length": 5,
      "id": 58,
      "type": "STRING_LITERAL",
      "value": "echo "
    },
    {
      "length": 6,
      "id": 59,
      "type": "STRING_LITERAL",
      "value": "files/"
    },
    {
      "length": 15,
      "id": 60,
      "type": "STRING_LITERAL",
      "value": "tainted content"
    },
    {
      "length": 32,
      "id": 61,
      "type": "STRING_LITERAL",
      "value": "SELECT * FROM safe WHERE col = '"
    },
    {
      "length": 1,
      "id": 62,
      "type": "STRING_LITERAL",
      "value": "'"
    },
    {
      "name": "main",
      "id": 63,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String[]",
      "name": "args",
      "id": 64,
      "type": "PARAMETER"
    },
    {
      "dataType": "String",
      "name": "cliInput",
      "id": 65,
      "type": "LOCAL_VARIABLE",
      "initializer": "args[0]"
    },
    {
      "scope": "new TaintTestSuite()",
      "name": "sink",
      "arguments": 1,
      "id": 66,
      "type": "METHOD_CALL"
    },
    {
      "className": "TaintTestSuite",
      "arguments": 0,
      "id": 67,
      "type": "OBJECT_CREATION"
    },
    {
      "array": "args",
      "index": "0",
      "id": 68,
      "type": "TYPE_ARRAY_CALL"
    },
    {
      "name": "sink",
      "id": 69,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String",
      "name": "input",
      "id": 70,
      "type": "PARAMETER"
    },
    {
      "scope": "System.out",
      "name": "println",
      "arguments": 1,
      "id": 71,
      "type": "METHOD_CALL"
    },
    {
      "scope": "Runtime.getRuntime()",
      "name": "exec",
      "arguments": 1,
      "id": 72,
      "type": "METHOD_CALL"
    },
    {
      "scope": "Runtime",
      "name": "getRuntime",
      "arguments": 0,
      "id": 73,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "\"CLI: \"",
      "rightOperand": "input",
      "id": 74,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"ping \"",
      "rightOperand": "input",
      "id": 75,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "field": "out",
      "scope": "System",
      "id": 76,
      "type": "FIELD_ACCESS"
    },
    {
      "length": 5,
      "id": 77,
      "type": "STRING_LITERAL",
      "value": "CLI: "
    },
    {
      "length": 5,
      "id": 78,
      "type": "STRING_LITERAL",
      "value": "ping "
    },
    {
      "name": "directFlow",
      "id": 79,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "String"
    },
    {
      "dataType": "String",
      "name": "data",
      "id": 80,
      "type": "PARAMETER"
    },
    {
      "expression": "data",
      "id": 81,
      "type": "RETURN_STATEMENT"
    },
    {
      "name": "methodSink",
      "id": 82,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String",
      "name": "val",
      "id": 83,
      "type": "PARAMETER"
    },
    {
      "scope": "Runtime.getRuntime()",
      "name": "exec",
      "arguments": 1,
      "id": 84,
      "type": "METHOD_CALL"
    },
    {
      "scope": "Runtime",
      "name": "getRuntime",
      "arguments": 0,
      "id": 85,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "\"echo \"",
      "rightOperand": "val",
      "id": 86,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "length": 5,
      "id": 87,
      "type": "STRING_LITERAL",
      "value": "echo "
    },
    {
      "name": "sanitize",
      "id": 88,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "String"
    },
    {
      "dataType": "String",
      "name": "input",
      "id": 89,
      "type": "PARAMETER"
    },
    {
      "scope": "input",
      "name": "replaceAll",
      "arguments": 2,
      "id": 90,
      "type": "METHOD_CALL"
    },
    {
      "expression": "input.replaceAll(\"[^a-zA-Z0-9]\", \"\")",
      "id": 91,
      "type": "RETURN_STATEMENT"
    },
    {
      "length": 12,
      "id": 92,
      "type": "STRING_LITERAL",
      "value": "[^a-zA-Z0-9]"
    },
    {
      "length": 0,
      "id": 93,
      "type": "STRING_LITERAL",
      "value": ""
    },
    {
      "name": "getConnection",
      "id": 94,
      "type": "METHOD",
      "parameters": 0,
      "returnType": "Connection"
    },
    {
      "scope": "DriverManager",
      "name": "getConnection",
      "arguments": 3,
      "id": 95,
      "type": "METHOD_CALL"
    },
    {
      "expression": "DriverManager.getConnection(\"jdbc:mysql://localhost/test\", \"user\", \"pass\")",
      "id": 96,
      "type": "RETURN_STATEMENT"
    },
    {
      "length": 27,
      "id": 97,
      "type": "STRING_LITERAL",
      "value": "jdbc:mysql://localhost/test"
    },
    {
      "length": 4,
      "id": 98,
      "type": "STRING_LITERAL",
      "value": "user"
    },
    {
      "length": 4,
      "id": 99,
      "type": "STRING_LITERAL",
      "value": "pass"
    },
    {
      "isAsterisk": true,
      "isStatic": false,
      "name": "java.io",
      "id": 100,
      "type": "IMPORT"
    },
    {
      "isAsterisk": true,
      "isStatic": false,
      "name": "java.sql",
      "id": 101,
      "type": "IMPORT"
    },
    {
      "isAsterisk": true,
      "isStatic": false,
      "name": "javax.servlet.http",
      "id": 102,
      "type": "IMPORT"
    }
  ],
  "scanId": "377fbf18-8e5d-4da0-b0b9-0d91497ac6eb",
  "edges": [
    {
      "source": 1,
      "type": "CONTAINS",
      "target": 2
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 3
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 4
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 5
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 6
    },
    {
      "source": 4,
      "type": "DATA_FLOW",
      "target": 6
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 7
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 8
    },
    {
      "source": 7,
      "type": "DATA_FLOW",
      "target": 8
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 9
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 9
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 10
    },
    {
      "source": 7,
      "type": "DATA_FLOW",
      "target": 10
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 11
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 11
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 12
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 12
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 13
    },
    {
      "source": 12,
      "type": "DATA_FLOW",
      "target": 13
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 14
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 14
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 15
    },
    {
      "source": 7,
      "type": "DATA_FLOW",
      "target": 15
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 16
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 17
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 17
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 18
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 19
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 20
    },
    {
      "source": 9,
      "type": "DATA_FLOW",
      "target": 20
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 21
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 22
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 22
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 23
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 24
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 24
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 25
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 26
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 27
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 28
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 28
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 29
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 30
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 31
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 31
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 32
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 32
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 33
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 33
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 34
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 35
    },
    {
      "source": 14,
      "type": "DATA_FLOW",
      "target": 35
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 36
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 36
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 37
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 37
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 38
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 38
    },
    {
      "source": 39,
      "type": "DECLARES",
      "target": 39
    },
    {
      "source": 3,
      "type": "CONTAINS_EXCEPTION_HANDLING",
      "target": 40
    },
    {
      "source": 41,
      "type": "DECLARES",
      "target": 41
    },
    {
      "source": 3,
      "type": "CONTAINS_EXCEPTION_HANDLING",
      "target": 42
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 43
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 44
    },
    {
      "source": 44,
      "type": "CONTAINS_EXPRESSION",
      "target": 45
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 46
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 47
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 48
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 49
    },
    {
      "source": 49,
      "type": "CONTAINS_EXPRESSION",
      "target": 50
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 51
    },
    {
      "source": 3,
      "type": "ACCESSES",
      "target": 52
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 53
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 54
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 55
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 56
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 57
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 58
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 59
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 60
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 61
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 62
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 63
    },
    {
      "source": 63,
      "type": "DECLARES",
      "target": 64
    },
    {
      "source": 63,
      "type": "DECLARES",
      "target": 65
    },
    {
      "source": 64,
      "type": "DATA_FLOW",
      "target": 65
    },
    {
      "source": 63,
      "type": "INVOKES",
      "target": 66
    },
    {
      "source": 65,
      "type": "DATA_FLOW",
      "target": 66
    },
    {
      "source": 63,
      "type": "INVOKES",
      "target": 67
    },
    {
      "source": 63,
      "type": "INVOKES",
      "target": 68
    },
    {
      "source": 64,
      "type": "DATA_FLOW",
      "target": 68
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 69
    },
    {
      "source": 69,
      "type": "DECLARES",
      "target": 70
    },
    {
      "source": 69,
      "type": "INVOKES",
      "target": 71
    },
    {
      "source": 70,
      "type": "DATA_FLOW",
      "target": 71
    },
    {
      "source": 69,
      "type": "INVOKES",
      "target": 72
    },
    {
      "source": 70,
      "type": "DATA_FLOW",
      "target": 72
    },
    {
      "source": 69,
      "type": "INVOKES",
      "target": 73
    },
    {
      "source": 69,
      "type": "CONTAINS_EXPRESSION",
      "target": 74
    },
    {
      "source": 69,
      "type": "CONTAINS_EXPRESSION",
      "target": 75
    },
    {
      "source": 69,
      "type": "ACCESSES",
      "target": 76
    },
    {
      "source": 69,
      "type": "CONTAINS_LITERAL",
      "target": 77
    },
    {
      "source": 69,
      "type": "CONTAINS_LITERAL",
      "target": 78
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 79
    },
    {
      "source": 79,
      "type": "DECLARES",
      "target": 80
    },
    {
      "source": 79,
      "type": "CONTAINS",
      "target": 81
    },
    {
      "source": 80,
      "type": "DATA_FLOW",
      "target": 81
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 82
    },
    {
      "source": 82,
      "type": "DECLARES",
      "target": 83
    },
    {
      "source": 82,
      "type": "INVOKES",
      "target": 84
    },
    {
      "source": 83,
      "type": "DATA_FLOW",
      "target": 84
    },
    {
      "source": 82,
      "type": "INVOKES",
      "target": 85
    },
    {
      "source": 82,
      "type": "CONTAINS_EXPRESSION",
      "target": 86
    },
    {
      "source": 82,
      "type": "CONTAINS_LITERAL",
      "target": 87
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 88
    },
    {
      "source": 88,
      "type": "DECLARES",
      "target": 89
    },
    {
      "source": 88,
      "type": "INVOKES",
      "target": 90
    },
    {
      "source": 88,
      "type": "CONTAINS",
      "target": 91
    },
    {
      "source": 89,
      "type": "DATA_FLOW",
      "target": 91
    },
    {
      "source": 88,
      "type": "CONTAINS_LITERAL",
      "target": 92
    },
    {
      "source": 88,
      "type": "CONTAINS_LITERAL",
      "target": 93
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 94
    },
    {
      "source": 94,
      "type": "INVOKES",
      "target": 95
    },
    {
      "source": 94,
      "type": "CONTAINS",
      "target": 96
    },
    {
      "source": 94,
      "type": "CONTAINS_LITERAL",
      "target": 97
    },
    {
      "source": 94,
      "type": "CONTAINS_LITERAL",
      "target": 98
    },
    {
      "source": 94,
      "type": "CONTAINS_LITERAL",
      "target": 99
    },
    {
      "source": 1,
      "type": "IMPORTS",
      "target": 100
    },
    {
      "source": 1,
      "type": "IMPORTS",
      "target": 101
    },
    {
      "source": 1,
      "type": "IMPORTS",
      "target": 102
    }
  ],
  "timestamp": 1749116101674,
  "statistics": {
    "assignments": 11,
    "controlFlowNodes": 2,
    "methodCalls": 35,
    "stringLiterals": 18,
    "totalEdges": 130,
    "totalNodes": 102
  }
}
