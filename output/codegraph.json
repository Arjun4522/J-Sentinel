{
  "inefficientListOperations": [],
  "nodes": [
    {
      "name": "FileReadTaintTest.java",
      "id": 1,
      "type": "FILE"
    },
    {
      "name": "FileReadTaintTest",
      "id": 2,
      "type": "CLASS"
    },
    {
      "name": "readAndProcess",
      "id": 3,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String",
      "name": "filePath",
      "id": 4,
      "type": "PARAMETER"
    },
    {
      "dataType": "BufferedReader",
      "name": "reader",
      "id": 5,
      "type": "LOCAL_VARIABLE",
      "initializer": "new BufferedReader(new FileReader(filePath))"
    },
    {
      "dataType": "String",
      "name": "line",
      "id": 6,
      "type": "LOCAL_VARIABLE",
      "initializer": "reader.readLine()"
    },
    {
      "scope": "reader",
      "name": "readLine",
      "arguments": 0,
      "id": 7,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "info",
      "arguments": 1,
      "id": 8,
      "type": "METHOD_CALL"
    },
    {
      "name": "writeToLogFile",
      "arguments": 1,
      "id": 9,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "severe",
      "arguments": 1,
      "id": 10,
      "type": "METHOD_CALL"
    },
    {
      "scope": "e",
      "name": "getMessage",
      "arguments": 0,
      "id": 11,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "line",
      "rightOperand": "null",
      "id": 12,
      "type": "BINARY_EXPRESSION",
      "operator": "!="
    },
    {
      "leftOperand": "\"Read from file: \"",
      "rightOperand": "line",
      "id": 13,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"IO Error: \"",
      "rightOperand": "e.getMessage()",
      "id": 14,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "hasElse": false,
      "condition": "line != null",
      "id": 15,
      "type": "IF_STATEMENT"
    },
    {
      "length": 16,
      "id": 16,
      "type": "STRING_LITERAL",
      "value": "Read from file: "
    },
    {
      "length": 10,
      "id": 17,
      "type": "STRING_LITERAL",
      "value": "IO Error: "
    },
    {
      "hasFinallyBlock": false,
      "catchClausesCount": 1,
      "exceptionTypes": [
        "IOException"
      ],
      "id": 18,
      "type": "TRY_CATCH_BLOCK"
    },
    {
      "name": "writeToLogFile",
      "id": 20,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String",
      "name": "content",
      "id": 21,
      "type": "PARAMETER"
    },
    {
      "dataType": "PrintWriter",
      "name": "writer",
      "id": 22,
      "type": "LOCAL_VARIABLE",
      "initializer": "new PrintWriter(new FileWriter(\"output.log\", true))"
    },
    {
      "scope": "writer",
      "name": "println",
      "arguments": 1,
      "id": 23,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "warning",
      "arguments": 1,
      "id": 24,
      "type": "METHOD_CALL"
    },
    {
      "scope": "e",
      "name": "getMessage",
      "arguments": 0,
      "id": 25,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "\"Log: \"",
      "rightOperand": "content",
      "id": 26,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"Write error: \"",
      "rightOperand": "e.getMessage()",
      "id": 27,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "length": 10,
      "id": 28,
      "type": "STRING_LITERAL",
      "value": "output.log"
    },
    {
      "length": 5,
      "id": 29,
      "type": "STRING_LITERAL",
      "value": "Log: "
    },
    {
      "length": 13,
      "id": 30,
      "type": "STRING_LITERAL",
      "value": "Write error: "
    },
    {
      "hasFinallyBlock": false,
      "catchClausesCount": 1,
      "exceptionTypes": [
        "IOException"
      ],
      "id": 31,
      "type": "TRY_CATCH_BLOCK"
    },
    {
      "name": "main",
      "id": 33,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String[]",
      "name": "args",
      "id": 34,
      "type": "PARAMETER"
    },
    {
      "dataType": "FileReadTaintTest",
      "name": "test",
      "id": 35,
      "type": "LOCAL_VARIABLE",
      "initializer": "new FileReadTaintTest()"
    },
    {
      "dataType": "String",
      "name": "path",
      "id": 36,
      "type": "LOCAL_VARIABLE",
      "initializer": "args.length > 0 ? args[0] : \"input.txt\""
    },
    {
      "scope": "test",
      "name": "readAndProcess",
      "arguments": 1,
      "id": 37,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "args.length",
      "rightOperand": "0",
      "id": 38,
      "type": "BINARY_EXPRESSION",
      "operator": ">"
    },
    {
      "field": "length",
      "scope": "args",
      "id": 39,
      "type": "FIELD_ACCESS"
    },
    {
      "length": 9,
      "id": 40,
      "type": "STRING_LITERAL",
      "value": "input.txt"
    },
    {
      "dataType": "Logger",
      "name": "logger",
      "id": 41,
      "type": "FIELD"
    },
    {
      "name": "sentinel.test",
      "id": 42,
      "type": "PACKAGE"
    },
    {
      "isAsterisk": true,
      "isStatic": false,
      "name": "java.io",
      "id": 43,
      "type": "IMPORT"
    },
    {
      "isAsterisk": false,
      "isStatic": false,
      "name": "java.util.logging.Logger",
      "id": 44,
      "type": "IMPORT"
    },
    {
      "name": "LogInjectionTest.java",
      "id": 45,
      "type": "FILE"
    },
    {
      "name": "SimpleTest",
      "id": 46,
      "type": "CLASS"
    },
    {
      "name": "run",
      "id": 47,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String",
      "name": "userInput",
      "id": 48,
      "type": "PARAMETER"
    },
    {
      "dataType": "BufferedReader",
      "name": "reader",
      "id": 49,
      "type": "LOCAL_VARIABLE",
      "initializer": "new BufferedReader(new InputStreamReader(System.in))"
    },
    {
      "dataType": "String",
      "name": "line",
      "id": 50,
      "type": "LOCAL_VARIABLE",
      "initializer": "reader.readLine()"
    },
    {
      "scope": "logger",
      "name": "info",
      "arguments": 1,
      "id": 51,
      "type": "METHOD_CALL"
    },
    {
      "scope": "reader",
      "name": "readLine",
      "arguments": 0,
      "id": 52,
      "type": "METHOD_CALL"
    },
    {
      "name": "process",
      "arguments": 1,
      "id": 53,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "severe",
      "arguments": 1,
      "id": 54,
      "type": "METHOD_CALL"
    },
    {
      "scope": "ex",
      "name": "getMessage",
      "arguments": 0,
      "id": 55,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "info",
      "arguments": 1,
      "id": 56,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "\"Processing input: \"",
      "rightOperand": "userInput",
      "id": 57,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "line",
      "rightOperand": "null",
      "id": 58,
      "type": "BINARY_EXPRESSION",
      "operator": "!="
    },
    {
      "leftOperand": "\"Error: \"",
      "rightOperand": "ex.getMessage()",
      "id": 59,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "hasElse": false,
      "condition": "line != null",
      "id": 60,
      "type": "IF_STATEMENT"
    },
    {
      "field": "in",
      "scope": "System",
      "id": 61,
      "type": "FIELD_ACCESS"
    },
    {
      "length": 18,
      "id": 62,
      "type": "STRING_LITERAL",
      "value": "Processing input: "
    },
    {
      "length": 7,
      "id": 63,
      "type": "STRING_LITERAL",
      "value": "Error: "
    },
    {
      "length": 19,
      "id": 64,
      "type": "STRING_LITERAL",
      "value": "Operation complete."
    },
    {
      "hasFinallyBlock": true,
      "catchClausesCount": 1,
      "exceptionTypes": [
        "IOException"
      ],
      "id": 65,
      "type": "TRY_CATCH_BLOCK"
    },
    {
      "name": "process",
      "id": 67,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String",
      "name": "input",
      "id": 68,
      "type": "PARAMETER"
    },
    {
      "scope": "\"start\"",
      "name": "equals",
      "arguments": 1,
      "id": 69,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "info",
      "arguments": 1,
      "id": 70,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "warning",
      "arguments": 1,
      "id": 71,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "\"Started: \"",
      "rightOperand": "input",
      "id": 72,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"Invalid input: \"",
      "rightOperand": "input",
      "id": 73,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "hasElse": true,
      "condition": "\"start\".equals(input)",
      "id": 74,
      "type": "IF_STATEMENT"
    },
    {
      "length": 5,
      "id": 75,
      "type": "STRING_LITERAL",
      "value": "start"
    },
    {
      "length": 9,
      "id": 76,
      "type": "STRING_LITERAL",
      "value": "Started: "
    },
    {
      "length": 15,
      "id": 77,
      "type": "STRING_LITERAL",
      "value": "Invalid input: "
    },
    {
      "name": "main",
      "id": 78,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String[]",
      "name": "args",
      "id": 79,
      "type": "PARAMETER"
    },
    {
      "dataType": "SimpleTest",
      "name": "test",
      "id": 80,
      "type": "LOCAL_VARIABLE",
      "initializer": "new SimpleTest()"
    },
    {
      "scope": "test",
      "name": "run",
      "arguments": 1,
      "id": 81,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "args.length",
      "rightOperand": "0",
      "id": 82,
      "type": "BINARY_EXPRESSION",
      "operator": ">"
    },
    {
      "field": "length",
      "scope": "args",
      "id": 83,
      "type": "FIELD_ACCESS"
    },
    {
      "length": 7,
      "id": 84,
      "type": "STRING_LITERAL",
      "value": "default"
    },
    {
      "dataType": "Logger",
      "name": "logger",
      "id": 85,
      "type": "FIELD"
    },
    {
      "name": "sentinel.test",
      "id": 86,
      "type": "PACKAGE"
    },
    {
      "isAsterisk": true,
      "isStatic": false,
      "name": "java.io",
      "id": 87,
      "type": "IMPORT"
    },
    {
      "isAsterisk": true,
      "isStatic": false,
      "name": "java.util.logging",
      "id": 88,
      "type": "IMPORT"
    },
    {
      "name": "SafeInputTest.java",
      "id": 89,
      "type": "FILE"
    },
    {
      "name": "SafeInputTest",
      "id": 90,
      "type": "CLASS"
    },
    {
      "name": "processSafeInput",
      "id": 91,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String",
      "name": "userInput",
      "id": 92,
      "type": "PARAMETER"
    },
    {
      "dataType": "String",
      "name": "sanitized",
      "id": 93,
      "type": "LOCAL_VARIABLE",
      "initializer": "userInput.replaceAll(\"[^a-zA-Z0-9]\", \"\")"
    },
    {
      "scope": "userInput",
      "name": "isEmpty",
      "arguments": 0,
      "id": 94,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "info",
      "arguments": 1,
      "id": 95,
      "type": "METHOD_CALL"
    },
    {
      "scope": "userInput",
      "name": "replaceAll",
      "arguments": 2,
      "id": 96,
      "type": "METHOD_CALL"
    },
    {
      "scope": "sanitized",
      "name": "length",
      "arguments": 0,
      "id": 97,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "info",
      "arguments": 1,
      "id": 98,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "warning",
      "arguments": 1,
      "id": 99,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "userInput == null",
      "rightOperand": "userInput.isEmpty()",
      "id": 100,
      "type": "BINARY_EXPRESSION",
      "operator": "||"
    },
    {
      "leftOperand": "userInput",
      "rightOperand": "null",
      "id": 101,
      "type": "BINARY_EXPRESSION",
      "operator": "=="
    },
    {
      "leftOperand": "sanitized.length()",
      "rightOperand": "0",
      "id": 102,
      "type": "BINARY_EXPRESSION",
      "operator": ">"
    },
    {
      "leftOperand": "\"Sanitized: \"",
      "rightOperand": "sanitized",
      "id": 103,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "hasElse": false,
      "condition": "userInput == null || userInput.isEmpty()",
      "id": 104,
      "type": "IF_STATEMENT"
    },
    {
      "hasElse": true,
      "condition": "sanitized.length() > 0",
      "id": 105,
      "type": "IF_STATEMENT"
    },
    {
      "length": 13,
      "id": 106,
      "type": "STRING_LITERAL",
      "value": "Invalid input"
    },
    {
      "length": 12,
      "id": 107,
      "type": "STRING_LITERAL",
      "value": "[^a-zA-Z0-9]"
    },
    {
      "length": 0,
      "id": 108,
      "type": "STRING_LITERAL",
      "value": ""
    },
    {
      "length": 11,
      "id": 109,
      "type": "STRING_LITERAL",
      "value": "Sanitized: "
    },
    {
      "length": 19,
      "id": 110,
      "type": "STRING_LITERAL",
      "value": "No valid characters"
    },
    {
      "id": 111,
      "type": "RETURN_STATEMENT"
    },
    {
      "name": "main",
      "id": 112,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String[]",
      "name": "args",
      "id": 113,
      "type": "PARAMETER"
    },
    {
      "dataType": "SafeInputTest",
      "name": "test",
      "id": 114,
      "type": "LOCAL_VARIABLE",
      "initializer": "new SafeInputTest()"
    },
    {
      "dataType": "String",
      "name": "input",
      "id": 115,
      "type": "LOCAL_VARIABLE",
      "initializer": "args.length > 0 ? args[0] : \"\""
    },
    {
      "scope": "test",
      "name": "processSafeInput",
      "arguments": 1,
      "id": 116,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "args.length",
      "rightOperand": "0",
      "id": 117,
      "type": "BINARY_EXPRESSION",
      "operator": ">"
    },
    {
      "field": "length",
      "scope": "args",
      "id": 118,
      "type": "FIELD_ACCESS"
    },
    {
      "length": 0,
      "id": 119,
      "type": "STRING_LITERAL",
      "value": ""
    },
    {
      "dataType": "Logger",
      "name": "logger",
      "id": 120,
      "type": "FIELD"
    },
    {
      "name": "sentinel.test",
      "id": 121,
      "type": "PACKAGE"
    },
    {
      "isAsterisk": false,
      "isStatic": false,
      "name": "java.util.logging.Logger",
      "id": 122,
      "type": "IMPORT"
    },
    {
      "name": "CrossMethodTaintTest.java",
      "id": 123,
      "type": "FILE"
    },
    {
      "name": "CrossMethodTaintTest",
      "id": 124,
      "type": "CLASS"
    },
    {
      "name": "start",
      "id": 125,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String",
      "name": "userData",
      "id": 126,
      "type": "PARAMETER"
    },
    {
      "dataType": "String",
      "name": "processed",
      "id": 127,
      "type": "LOCAL_VARIABLE",
      "initializer": "transform(userData)"
    },
    {
      "name": "transform",
      "arguments": 1,
      "id": 128,
      "type": "METHOD_CALL"
    },
    {
      "name": "logData",
      "arguments": 1,
      "id": 129,
      "type": "METHOD_CALL"
    },
    {
      "name": "transform",
      "id": 130,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "String"
    },
    {
      "dataType": "String",
      "name": "input",
      "id": 131,
      "type": "PARAMETER"
    },
    {
      "scope": "input",
      "name": "toUpperCase",
      "arguments": 0,
      "id": 132,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "input",
      "rightOperand": "null",
      "id": 133,
      "type": "BINARY_EXPRESSION",
      "operator": "=="
    },
    {
      "hasElse": false,
      "condition": "input == null",
      "id": 134,
      "type": "IF_STATEMENT"
    },
    {
      "length": 7,
      "id": 135,
      "type": "STRING_LITERAL",
      "value": "default"
    },
    {
      "expression": "\"default\"",
      "id": 136,
      "type": "RETURN_STATEMENT"
    },
    {
      "expression": "input.toUpperCase()",
      "id": 137,
      "type": "RETURN_STATEMENT"
    },
    {
      "name": "logData",
      "id": 138,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String",
      "name": "data",
      "id": 139,
      "type": "PARAMETER"
    },
    {
      "scope": "logger",
      "name": "info",
      "arguments": 1,
      "id": 140,
      "type": "METHOD_CALL"
    },
    {
      "scope": "data",
      "name": "length",
      "arguments": 0,
      "id": 141,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "warning",
      "arguments": 1,
      "id": 142,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "\"Data: \"",
      "rightOperand": "data",
      "id": 143,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "data.length()",
      "rightOperand": "10",
      "id": 144,
      "type": "BINARY_EXPRESSION",
      "operator": ">"
    },
    {
      "leftOperand": "\"Long data: \"",
      "rightOperand": "data",
      "id": 145,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "hasElse": false,
      "condition": "data.length() > 10",
      "id": 146,
      "type": "IF_STATEMENT"
    },
    {
      "length": 6,
      "id": 147,
      "type": "STRING_LITERAL",
      "value": "Data: "
    },
    {
      "length": 11,
      "id": 148,
      "type": "STRING_LITERAL",
      "value": "Long data: "
    },
    {
      "name": "main",
      "id": 149,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String[]",
      "name": "args",
      "id": 150,
      "type": "PARAMETER"
    },
    {
      "dataType": "CrossMethodTaintTest",
      "name": "test",
      "id": 151,
      "type": "LOCAL_VARIABLE",
      "initializer": "new CrossMethodTaintTest()"
    },
    {
      "dataType": "String",
      "name": "data",
      "id": 152,
      "type": "LOCAL_VARIABLE",
      "initializer": "args.length > 0 ? args[0] : null"
    },
    {
      "scope": "test",
      "name": "start",
      "arguments": 1,
      "id": 153,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "args.length",
      "rightOperand": "0",
      "id": 154,
      "type": "BINARY_EXPRESSION",
      "operator": ">"
    },
    {
      "field": "length",
      "scope": "args",
      "id": 155,
      "type": "FIELD_ACCESS"
    },
    {
      "dataType": "Logger",
      "name": "logger",
      "id": 156,
      "type": "FIELD"
    },
    {
      "name": "sentinel.test",
      "id": 157,
      "type": "PACKAGE"
    },
    {
      "isAsterisk": false,
      "isStatic": false,
      "name": "java.util.logging.Logger",
      "id": 158,
      "type": "IMPORT"
    }
  ],
  "potentialLogInjections": [
    {
      "severity": "High",
      "methodCallId": 8,
      "methodName": "readAndProcess",
      "suggestedFix": "Sanitize input before logging, e.g., replaceAll(\"[\\n\\r]\", \"\")",
      "message": "Potential log injection: info with variable content"
    },
    {
      "severity": "Low",
      "methodCallId": 23,
      "methodName": "writeToLogFile",
      "suggestedFix": "Sanitize input before logging, e.g., replaceAll(\"[\\n\\r]\", \"\")",
      "message": "Potential log injection: println with variable content"
    },
    {
      "severity": "High",
      "methodCallId": 51,
      "methodName": "run",
      "suggestedFix": "Sanitize input before logging, e.g., replaceAll(\"[\\n\\r]\", \"\")",
      "message": "Potential log injection: info with variable content"
    },
    {
      "severity": "High",
      "methodCallId": 70,
      "methodName": "process",
      "suggestedFix": "Sanitize input before logging, e.g., replaceAll(\"[\\n\\r]\", \"\")",
      "message": "Potential log injection: info with variable content"
    },
    {
      "severity": "High",
      "methodCallId": 71,
      "methodName": "process",
      "suggestedFix": "Sanitize input before logging, e.g., replaceAll(\"[\\n\\r]\", \"\")",
      "message": "Potential log injection: warning with variable content"
    },
    {
      "severity": "High",
      "methodCallId": 98,
      "methodName": "processSafeInput",
      "suggestedFix": "Sanitize input before logging, e.g., replaceAll(\"[\\n\\r]\", \"\")",
      "message": "Potential log injection: info with variable content"
    },
    {
      "severity": "High",
      "methodCallId": 140,
      "methodName": "logData",
      "suggestedFix": "Sanitize input before logging, e.g., replaceAll(\"[\\n\\r]\", \"\")",
      "message": "Potential log injection: info with variable content"
    },
    {
      "severity": "High",
      "methodCallId": 142,
      "methodName": "logData",
      "suggestedFix": "Sanitize input before logging, e.g., replaceAll(\"[\\n\\r]\", \"\")",
      "message": "Potential log injection: warning with variable content"
    }
  ],
  "scanId": "505f3a22-e96b-400e-b70c-b5e41b1e1a4a",
  "constructorNamingIssues": [],
  "edges": [
    {
      "source": 1,
      "type": "CONTAINS",
      "target": 2
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 3
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 4
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 5
    },
    {
      "source": 4,
      "type": "DATA_FLOW",
      "target": 5
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 6
    },
    {
      "source": 5,
      "type": "DATA_FLOW",
      "target": 6
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 7
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 8
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 8
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 9
    },
    {
      "source": 6,
      "type": "DATA_FLOW",
      "target": 9
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 10
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 11
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 12
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 13
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 14
    },
    {
      "source": 3,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 15
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 16
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 17
    },
    {
      "source": 3,
      "type": "CONTAINS_EXCEPTION_HANDLING",
      "target": 19
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 20
    },
    {
      "source": 20,
      "type": "DECLARES",
      "target": 21
    },
    {
      "source": 20,
      "type": "DECLARES",
      "target": 22
    },
    {
      "source": 20,
      "type": "INVOKES",
      "target": 23
    },
    {
      "source": 21,
      "type": "DATA_FLOW",
      "target": 23
    },
    {
      "source": 20,
      "type": "INVOKES",
      "target": 24
    },
    {
      "source": 20,
      "type": "INVOKES",
      "target": 25
    },
    {
      "source": 20,
      "type": "CONTAINS_EXPRESSION",
      "target": 26
    },
    {
      "source": 20,
      "type": "CONTAINS_EXPRESSION",
      "target": 27
    },
    {
      "source": 20,
      "type": "CONTAINS_LITERAL",
      "target": 28
    },
    {
      "source": 20,
      "type": "CONTAINS_LITERAL",
      "target": 29
    },
    {
      "source": 20,
      "type": "CONTAINS_LITERAL",
      "target": 30
    },
    {
      "source": 20,
      "type": "CONTAINS_EXCEPTION_HANDLING",
      "target": 32
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 33
    },
    {
      "source": 33,
      "type": "DECLARES",
      "target": 34
    },
    {
      "source": 33,
      "type": "DECLARES",
      "target": 35
    },
    {
      "source": 33,
      "type": "DECLARES",
      "target": 36
    },
    {
      "source": 34,
      "type": "DATA_FLOW",
      "target": 36
    },
    {
      "source": 34,
      "type": "DATA_FLOW",
      "target": 36
    },
    {
      "source": 33,
      "type": "INVOKES",
      "target": 37
    },
    {
      "source": 36,
      "type": "DATA_FLOW",
      "target": 37
    },
    {
      "source": 33,
      "type": "CONTAINS_EXPRESSION",
      "target": 38
    },
    {
      "source": 33,
      "type": "ACCESSES",
      "target": 39
    },
    {
      "source": 33,
      "type": "CONTAINS_LITERAL",
      "target": 40
    },
    {
      "source": 2,
      "type": "DECLARES",
      "target": 41
    },
    {
      "source": 1,
      "type": "BELONGS_TO",
      "target": 42
    },
    {
      "source": 1,
      "type": "IMPORTS",
      "target": 43
    },
    {
      "source": 1,
      "type": "IMPORTS",
      "target": 44
    },
    {
      "source": 45,
      "type": "CONTAINS",
      "target": 46
    },
    {
      "source": 46,
      "type": "CONTAINS",
      "target": 47
    },
    {
      "source": 47,
      "type": "DECLARES",
      "target": 48
    },
    {
      "source": 47,
      "type": "DECLARES",
      "target": 49
    },
    {
      "source": 47,
      "type": "DECLARES",
      "target": 50
    },
    {
      "source": 49,
      "type": "DATA_FLOW",
      "target": 50
    },
    {
      "source": 47,
      "type": "INVOKES",
      "target": 51
    },
    {
      "source": 48,
      "type": "DATA_FLOW",
      "target": 51
    },
    {
      "source": 47,
      "type": "INVOKES",
      "target": 52
    },
    {
      "source": 47,
      "type": "INVOKES",
      "target": 53
    },
    {
      "source": 50,
      "type": "DATA_FLOW",
      "target": 53
    },
    {
      "source": 47,
      "type": "INVOKES",
      "target": 54
    },
    {
      "source": 47,
      "type": "INVOKES",
      "target": 55
    },
    {
      "source": 47,
      "type": "INVOKES",
      "target": 56
    },
    {
      "source": 47,
      "type": "CONTAINS_EXPRESSION",
      "target": 57
    },
    {
      "source": 47,
      "type": "CONTAINS_EXPRESSION",
      "target": 58
    },
    {
      "source": 47,
      "type": "CONTAINS_EXPRESSION",
      "target": 59
    },
    {
      "source": 47,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 60
    },
    {
      "source": 47,
      "type": "ACCESSES",
      "target": 61
    },
    {
      "source": 47,
      "type": "CONTAINS_LITERAL",
      "target": 62
    },
    {
      "source": 47,
      "type": "CONTAINS_LITERAL",
      "target": 63
    },
    {
      "source": 47,
      "type": "CONTAINS_LITERAL",
      "target": 64
    },
    {
      "source": 47,
      "type": "CONTAINS_EXCEPTION_HANDLING",
      "target": 66
    },
    {
      "source": 46,
      "type": "CONTAINS",
      "target": 67
    },
    {
      "source": 67,
      "type": "DECLARES",
      "target": 68
    },
    {
      "source": 67,
      "type": "INVOKES",
      "target": 69
    },
    {
      "source": 68,
      "type": "DATA_FLOW",
      "target": 69
    },
    {
      "source": 67,
      "type": "INVOKES",
      "target": 70
    },
    {
      "source": 68,
      "type": "DATA_FLOW",
      "target": 70
    },
    {
      "source": 67,
      "type": "INVOKES",
      "target": 71
    },
    {
      "source": 68,
      "type": "DATA_FLOW",
      "target": 71
    },
    {
      "source": 67,
      "type": "CONTAINS_EXPRESSION",
      "target": 72
    },
    {
      "source": 67,
      "type": "CONTAINS_EXPRESSION",
      "target": 73
    },
    {
      "source": 67,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 74
    },
    {
      "source": 67,
      "type": "CONTAINS_LITERAL",
      "target": 75
    },
    {
      "source": 67,
      "type": "CONTAINS_LITERAL",
      "target": 76
    },
    {
      "source": 67,
      "type": "CONTAINS_LITERAL",
      "target": 77
    },
    {
      "source": 46,
      "type": "CONTAINS",
      "target": 78
    },
    {
      "source": 78,
      "type": "DECLARES",
      "target": 79
    },
    {
      "source": 78,
      "type": "DECLARES",
      "target": 80
    },
    {
      "source": 78,
      "type": "INVOKES",
      "target": 81
    },
    {
      "source": 78,
      "type": "CONTAINS_EXPRESSION",
      "target": 82
    },
    {
      "source": 78,
      "type": "ACCESSES",
      "target": 83
    },
    {
      "source": 78,
      "type": "CONTAINS_LITERAL",
      "target": 84
    },
    {
      "source": 46,
      "type": "DECLARES",
      "target": 85
    },
    {
      "source": 45,
      "type": "BELONGS_TO",
      "target": 86
    },
    {
      "source": 45,
      "type": "IMPORTS",
      "target": 87
    },
    {
      "source": 45,
      "type": "IMPORTS",
      "target": 88
    },
    {
      "source": 89,
      "type": "CONTAINS",
      "target": 90
    },
    {
      "source": 90,
      "type": "CONTAINS",
      "target": 91
    },
    {
      "source": 91,
      "type": "DECLARES",
      "target": 92
    },
    {
      "source": 91,
      "type": "DECLARES",
      "target": 93
    },
    {
      "source": 92,
      "type": "DATA_FLOW",
      "target": 93
    },
    {
      "source": 91,
      "type": "INVOKES",
      "target": 94
    },
    {
      "source": 91,
      "type": "INVOKES",
      "target": 95
    },
    {
      "source": 91,
      "type": "INVOKES",
      "target": 96
    },
    {
      "source": 91,
      "type": "INVOKES",
      "target": 97
    },
    {
      "source": 91,
      "type": "INVOKES",
      "target": 98
    },
    {
      "source": 93,
      "type": "DATA_FLOW",
      "target": 98
    },
    {
      "source": 91,
      "type": "INVOKES",
      "target": 99
    },
    {
      "source": 91,
      "type": "CONTAINS_EXPRESSION",
      "target": 100
    },
    {
      "source": 91,
      "type": "CONTAINS_EXPRESSION",
      "target": 101
    },
    {
      "source": 91,
      "type": "CONTAINS_EXPRESSION",
      "target": 102
    },
    {
      "source": 91,
      "type": "CONTAINS_EXPRESSION",
      "target": 103
    },
    {
      "source": 91,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 104
    },
    {
      "source": 91,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 105
    },
    {
      "source": 91,
      "type": "CONTAINS_LITERAL",
      "target": 106
    },
    {
      "source": 91,
      "type": "CONTAINS_LITERAL",
      "target": 107
    },
    {
      "source": 91,
      "type": "CONTAINS_LITERAL",
      "target": 108
    },
    {
      "source": 91,
      "type": "CONTAINS_LITERAL",
      "target": 109
    },
    {
      "source": 91,
      "type": "CONTAINS_LITERAL",
      "target": 110
    },
    {
      "source": 91,
      "type": "CONTAINS",
      "target": 111
    },
    {
      "source": 90,
      "type": "CONTAINS",
      "target": 112
    },
    {
      "source": 112,
      "type": "DECLARES",
      "target": 113
    },
    {
      "source": 112,
      "type": "DECLARES",
      "target": 114
    },
    {
      "source": 112,
      "type": "DECLARES",
      "target": 115
    },
    {
      "source": 113,
      "type": "DATA_FLOW",
      "target": 115
    },
    {
      "source": 113,
      "type": "DATA_FLOW",
      "target": 115
    },
    {
      "source": 112,
      "type": "INVOKES",
      "target": 116
    },
    {
      "source": 115,
      "type": "DATA_FLOW",
      "target": 116
    },
    {
      "source": 112,
      "type": "CONTAINS_EXPRESSION",
      "target": 117
    },
    {
      "source": 112,
      "type": "ACCESSES",
      "target": 118
    },
    {
      "source": 112,
      "type": "CONTAINS_LITERAL",
      "target": 119
    },
    {
      "source": 90,
      "type": "DECLARES",
      "target": 120
    },
    {
      "source": 89,
      "type": "BELONGS_TO",
      "target": 121
    },
    {
      "source": 89,
      "type": "IMPORTS",
      "target": 122
    },
    {
      "source": 123,
      "type": "CONTAINS",
      "target": 124
    },
    {
      "source": 124,
      "type": "CONTAINS",
      "target": 125
    },
    {
      "source": 125,
      "type": "DECLARES",
      "target": 126
    },
    {
      "source": 125,
      "type": "DECLARES",
      "target": 127
    },
    {
      "source": 126,
      "type": "DATA_FLOW",
      "target": 127
    },
    {
      "source": 125,
      "type": "INVOKES",
      "target": 128
    },
    {
      "source": 126,
      "type": "DATA_FLOW",
      "target": 128
    },
    {
      "source": 125,
      "type": "INVOKES",
      "target": 129
    },
    {
      "source": 127,
      "type": "DATA_FLOW",
      "target": 129
    },
    {
      "source": 124,
      "type": "CONTAINS",
      "target": 130
    },
    {
      "source": 130,
      "type": "DECLARES",
      "target": 131
    },
    {
      "source": 130,
      "type": "INVOKES",
      "target": 132
    },
    {
      "source": 130,
      "type": "CONTAINS_EXPRESSION",
      "target": 133
    },
    {
      "source": 130,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 134
    },
    {
      "source": 130,
      "type": "CONTAINS_LITERAL",
      "target": 135
    },
    {
      "source": 130,
      "type": "CONTAINS",
      "target": 136
    },
    {
      "source": 130,
      "type": "CONTAINS",
      "target": 137
    },
    {
      "source": 124,
      "type": "CONTAINS",
      "target": 138
    },
    {
      "source": 138,
      "type": "DECLARES",
      "target": 139
    },
    {
      "source": 138,
      "type": "INVOKES",
      "target": 140
    },
    {
      "source": 139,
      "type": "DATA_FLOW",
      "target": 140
    },
    {
      "source": 138,
      "type": "INVOKES",
      "target": 141
    },
    {
      "source": 138,
      "type": "INVOKES",
      "target": 142
    },
    {
      "source": 139,
      "type": "DATA_FLOW",
      "target": 142
    },
    {
      "source": 138,
      "type": "CONTAINS_EXPRESSION",
      "target": 143
    },
    {
      "source": 138,
      "type": "CONTAINS_EXPRESSION",
      "target": 144
    },
    {
      "source": 138,
      "type": "CONTAINS_EXPRESSION",
      "target": 145
    },
    {
      "source": 138,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 146
    },
    {
      "source": 138,
      "type": "CONTAINS_LITERAL",
      "target": 147
    },
    {
      "source": 138,
      "type": "CONTAINS_LITERAL",
      "target": 148
    },
    {
      "source": 124,
      "type": "CONTAINS",
      "target": 149
    },
    {
      "source": 149,
      "type": "DECLARES",
      "target": 150
    },
    {
      "source": 149,
      "type": "DECLARES",
      "target": 151
    },
    {
      "source": 149,
      "type": "DECLARES",
      "target": 152
    },
    {
      "source": 150,
      "type": "DATA_FLOW",
      "target": 152
    },
    {
      "source": 150,
      "type": "DATA_FLOW",
      "target": 152
    },
    {
      "source": 149,
      "type": "INVOKES",
      "target": 153
    },
    {
      "source": 152,
      "type": "DATA_FLOW",
      "target": 153
    },
    {
      "source": 149,
      "type": "CONTAINS_EXPRESSION",
      "target": 154
    },
    {
      "source": 149,
      "type": "ACCESSES",
      "target": 155
    },
    {
      "source": 124,
      "type": "DECLARES",
      "target": 156
    },
    {
      "source": 123,
      "type": "BELONGS_TO",
      "target": 157
    },
    {
      "source": 123,
      "type": "IMPORTS",
      "target": 158
    }
  ],
  "missingInputValidations": [
    {
      "methodId": 3,
      "methodName": "readAndProcess",
      "suggestedFix": "Add null check: if (filePath == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: filePath"
    },
    {
      "methodId": 3,
      "methodName": "readAndProcess",
      "suggestedFix": "Add validation: if (filePath.isEmpty()) { throw new IllegalArgumentException(\"Parameter cannot be empty\"); }",
      "message": "Missing length/isEmpty check for parameters: filePath"
    },
    {
      "methodId": 20,
      "methodName": "writeToLogFile",
      "suggestedFix": "Add null check: if (content == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: content"
    },
    {
      "methodId": 20,
      "methodName": "writeToLogFile",
      "suggestedFix": "Add validation: if (content.isEmpty()) { throw new IllegalArgumentException(\"Parameter cannot be empty\"); }",
      "message": "Missing length/isEmpty check for parameters: content"
    },
    {
      "methodId": 33,
      "methodName": "main",
      "suggestedFix": "Add null check: if (args == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: args"
    },
    {
      "methodId": 47,
      "methodName": "run",
      "suggestedFix": "Add null check: if (userInput == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: userInput"
    },
    {
      "methodId": 47,
      "methodName": "run",
      "suggestedFix": "Add validation: if (userInput.isEmpty()) { throw new IllegalArgumentException(\"Parameter cannot be empty\"); }",
      "message": "Missing length/isEmpty check for parameters: userInput"
    },
    {
      "methodId": 67,
      "methodName": "process",
      "suggestedFix": "Add null check: if (input == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: input"
    },
    {
      "methodId": 67,
      "methodName": "process",
      "suggestedFix": "Add validation: if (input.isEmpty()) { throw new IllegalArgumentException(\"Parameter cannot be empty\"); }",
      "message": "Missing length/isEmpty check for parameters: input"
    },
    {
      "methodId": 78,
      "methodName": "main",
      "suggestedFix": "Add null check: if (args == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: args"
    },
    {
      "methodId": 112,
      "methodName": "main",
      "suggestedFix": "Add null check: if (args == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: args"
    },
    {
      "methodId": 125,
      "methodName": "start",
      "suggestedFix": "Add null check: if (userData == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: userData"
    },
    {
      "methodId": 125,
      "methodName": "start",
      "suggestedFix": "Add validation: if (userData.isEmpty()) { throw new IllegalArgumentException(\"Parameter cannot be empty\"); }",
      "message": "Missing length/isEmpty check for parameters: userData"
    },
    {
      "methodId": 130,
      "methodName": "transform",
      "suggestedFix": "Add validation: if (input.isEmpty()) { throw new IllegalArgumentException(\"Parameter cannot be empty\"); }",
      "message": "Missing length/isEmpty check for parameters: input"
    },
    {
      "methodId": 138,
      "methodName": "logData",
      "suggestedFix": "Add null check: if (data == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: data"
    },
    {
      "methodId": 149,
      "methodName": "main",
      "suggestedFix": "Add null check: if (args == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: args"
    }
  ],
  "sensitiveDataExposures": [
    {
      "severity": "Medium",
      "methodName": "readAndProcess",
      "suggestedFix": "Avoid logging exception details; use a generic error message instead",
      "message": "Sensitive data exposure: severe may leak exception details in catch block"
    },
    {
      "severity": "Medium",
      "methodName": "writeToLogFile",
      "suggestedFix": "Avoid logging exception details; use a generic error message instead",
      "message": "Sensitive data exposure: warning may leak exception details in catch block"
    },
    {
      "severity": "Medium",
      "methodName": "run",
      "suggestedFix": "Avoid logging exception details; use a generic error message instead",
      "message": "Sensitive data exposure: severe may leak exception details in catch block"
    }
  ],
  "timestamp": 1749070912715,
  "overlyBroadCatches": [],
  "statistics": {
    "inefficientListOperations": 0,
    "assignments": 14,
    "potentialLogInjections": 8,
    "constructorNamingIssues": 0,
    "controlFlowNodes": 7,
    "methodCalls": 33,
    "missingInputValidations": 16,
    "stringLiterals": 22,
    "sensitiveDataExposures": 3,
    "totalEdges": 178,
    "totalNodes": 155,
    "overlyBroadCatches": 0
  }
}
