{
  "inefficientListOperations": [],
  "nodes": [
    {
      "name": "test.java",
      "id": 1,
      "type": "FILE"
    },
    {
      "name": "SimpleTest",
      "id": 2,
      "type": "CLASS"
    },
    {
      "name": "run",
      "id": 3,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String",
      "name": "userInput",
      "id": 4,
      "type": "PARAMETER"
    },
    {
      "scope": "logger",
      "name": "info",
      "arguments": 1,
      "id": 5,
      "type": "METHOD_CALL"
    },
    {
      "scope": "reader",
      "name": "readLine",
      "arguments": 0,
      "id": 6,
      "type": "METHOD_CALL"
    },
    {
      "name": "process",
      "arguments": 1,
      "id": 7,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "severe",
      "arguments": 1,
      "id": 8,
      "type": "METHOD_CALL"
    },
    {
      "scope": "ex",
      "name": "getMessage",
      "arguments": 0,
      "id": 9,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "info",
      "arguments": 1,
      "id": 10,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "\"Processing input: \"",
      "rightOperand": "userInput",
      "id": 11,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "line",
      "rightOperand": "null",
      "id": 12,
      "type": "BINARY_EXPRESSION",
      "operator": "!="
    },
    {
      "leftOperand": "\"Error: \"",
      "rightOperand": "ex.getMessage()",
      "id": 13,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "hasElse": false,
      "condition": "line != null",
      "id": 14,
      "type": "IF_STATEMENT"
    },
    {
      "dataType": "BufferedReader",
      "name": "reader",
      "id": 15,
      "type": "LOCAL_VARIABLE",
      "initializer": "new BufferedReader(new InputStreamReader(System.in))"
    },
    {
      "dataType": "String",
      "name": "line",
      "id": 16,
      "type": "LOCAL_VARIABLE",
      "initializer": "reader.readLine()"
    },
    {
      "field": "in",
      "scope": "System",
      "id": 17,
      "type": "FIELD_ACCESS"
    },
    {
      "length": 18,
      "id": 18,
      "type": "STRING_LITERAL",
      "value": "Processing input: "
    },
    {
      "length": 7,
      "id": 19,
      "type": "STRING_LITERAL",
      "value": "Error: "
    },
    {
      "length": 19,
      "id": 20,
      "type": "STRING_LITERAL",
      "value": "Operation complete."
    },
    {
      "hasFinallyBlock": true,
      "catchClausesCount": 1,
      "exceptionTypes": ["IOException"],
      "id": 21,
      "type": "TRY_CATCH_BLOCK"
    },
    {
      "name": "process",
      "id": 22,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "dataType": "String",
      "name": "input",
      "id": 23,
      "type": "PARAMETER"
    },
    {
      "scope": "\"start\"",
      "name": "equals",
      "arguments": 1,
      "id": 24,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "info",
      "arguments": 1,
      "id": 25,
      "type": "METHOD_CALL"
    },
    {
      "scope": "logger",
      "name": "warning",
      "arguments": 1,
      "id": 26,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "\"Started: \"",
      "rightOperand": "input",
      "id": 27,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "leftOperand": "\"Invalid input: \"",
      "rightOperand": "input",
      "id": 28,
      "type": "BINARY_EXPRESSION",
      "operator": "+"
    },
    {
      "hasElse": true,
      "condition": "\"start\".equals(input)",
      "id": 29,
      "type": "IF_STATEMENT"
    },
    {
      "length": 5,
      "id": 30,
      "type": "STRING_LITERAL",
      "value": "start"
    },
    {
      "length": 9,
      "id": 31,
      "type": "STRING_LITERAL",
      "value": "Started: "
    },
    {
      "length": 15,
      "id": 32,
      "type": "STRING_LITERAL",
      "value": "Invalid input: "
    },
    {
      "name": "main",
      "id": 33,
      "type": "METHOD",
      "parameters": 1,
      "returnType": "void"
    },
    {
      "scope": "test",
      "name": "run",
      "arguments": 1,
      "id": 34,
      "type": "METHOD_CALL"
    },
    {
      "leftOperand": "args.length",
      "rightOperand": "0",
      "id": 35,
      "type": "BINARY_EXPRESSION",
      "operator": ">"
    },
    {
      "dataType": "SimpleTest",
      "name": "test",
      "id": 36,
      "type": "LOCAL_VARIABLE",
      "initializer": "new SimpleTest()"
    },
    {
      "field": "length",
      "scope": "args",
      "id": 37,
      "type": "FIELD_ACCESS"
    },
    {
      "length": 7,
      "id": 38,
      "type": "STRING_LITERAL",
      "value": "default"
    },
    {
      "dataType": "Logger",
      "name": "logger",
      "id": 39,
      "type": "FIELD"
    },
    {
      "isAsterisk": true,
      "isStatic": false,
      "name": "java.io",
      "id": 40,
      "type": "IMPORT"
    },
    {
      "isAsterisk": true,
      "isStatic": false,
      "name": "java.util.logging",
      "id": 41,
      "type": "IMPORT"
    },
    {
      "name": "sentinel.test",
      "id": 42,
      "type": "PACKAGE"
    }
  ],
  "potentialLogInjections": [
    {
      "severity": "High",
      "methodCallId": 5,
      "methodName": "run",
      "suggestedFix": "Sanitize input before concatenation, e.g., replaceAll(\"[\\n\\r]\", \"\")",
      "message": "Potential log injection: info with string concatenation involving variables"
    },
    {
      "severity": "High",
      "methodCallId": 25,
      "methodName": "process",
      "suggestedFix": "Sanitize input before concatenation, e.g., replaceAll(\"[\\n\\r]\", \"\")",
      "message": "Potential log injection: info with string concatenation involving variables"
    },
    {
      "severity": "High",
      "methodCallId": 26,
      "methodName": "process",
      "suggestedFix": "Sanitize input before concatenation, e.g., replaceAll(\"[\\n\\r]\", \"\")",
      "message": "Potential log injection: warning with string concatenation involving variables"
    }
  ],
  "scanId": "fd01a841-ff0e-4f1e-9c9c-8e01fe973ed8",
  "constructorNamingIssues": [],
  "edges": [
    {
      "source": 1,
      "type": "CONTAINS",
      "target": 2
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 3
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 4
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 5
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 6
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 7
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 8
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 9
    },
    {
      "source": 3,
      "type": "INVOKES",
      "target": 10
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 11
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 12
    },
    {
      "source": 3,
      "type": "CONTAINS_EXPRESSION",
      "target": 13
    },
    {
      "source": 3,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 14
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 15
    },
    {
      "source": 3,
      "type": "DECLARES",
      "target": 16
    },
    {
      "source": 3,
      "type": "ACCESSES",
      "target": 17
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 18
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 19
    },
    {
      "source": 3,
      "type": "CONTAINS_LITERAL",
      "target": 20
    },
    {
      "source": 3,
      "type": "CONTAINS_EXCEPTION_HANDLING",
      "target": 21
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 22
    },
    {
      "source": 22,
      "type": "DECLARES",
      "target": 23
    },
    {
      "source": 22,
      "type": "INVOKES",
      "target": 24
    },
    {
      "source": 22,
      "type": "INVOKES",
      "target": 25
    },
    {
      "source": 22,
      "type": "INVOKES",
      "target": 26
    },
    {
      "source": 22,
      "type": "CONTAINS_EXPRESSION",
      "target": 27
    },
    {
      "source": 22,
      "type": "CONTAINS_EXPRESSION",
      "target": 28
    },
    {
      "source": 22,
      "type": "CONTAINS_CONTROL_FLOW",
      "target": 29
    },
    {
      "source": 22,
      "type": "CONTAINS_LITERAL",
      "target": 30
    },
    {
      "source": 22,
      "type": "CONTAINS_LITERAL",
      "target": 31
    },
    {
      "source": 22,
      "type": "CONTAINS_LITERAL",
      "target": 32
    },
    {
      "source": 2,
      "type": "CONTAINS",
      "target": 33
    },
    {
      "source": 33,
      "type": "INVOKES",
      "target": 34
    },
    {
      "source": 33,
      "type": "CONTAINS_EXPRESSION",
      "target": 35
    },
    {
      "source": 33,
      "type": "DECLARES",
      "target": 36
    },
    {
      "source": 33,
      "type": "ACCESSES",
      "target": 37
    },
    {
      "source": 33,
      "type": "CONTAINS_LITERAL",
      "target": 38
    },
    {
      "source": 2,
      "type": "DECLARES",
      "target": 39
    },
    {
      "source": 1,
      "type": "IMPORTS",
      "target": 40
    },
    {
      "source": 1,
      "type": "IMPORTS",
      "target": 41
    },
    {
      "source": 1,
      "type": "BELONGS_TO",
      "target": 42
    }
  ],
  "missingInputValidations": [
    {
      "methodId": 3,
      "methodName": "run",
      "suggestedFix": "Add null check: if (userInput == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: userInput"
    },
    {
      "methodId": 3,
      "methodName": "run",
      "suggestedFix": "Add validation: if (userInput.isEmpty()) { throw new IllegalArgumentException(\"Parameter cannot be empty\"); }",
      "message": "Missing length/isEmpty check for parameters: userInput"
    },
    {
      "methodId": 22,
      "methodName": "process",
      "suggestedFix": "Add null check: if (input == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: input"
    },
    {
      "methodId": 22,
      "methodName": "process",
      "suggestedFix": "Add validation: if (input.isEmpty()) { throw new IllegalArgumentException(\"Parameter cannot be empty\"); }",
      "message": "Missing length/isEmpty check for parameters: input"
    },
    {
      "methodId": 33,
      "methodName": "main",
      "suggestedFix": "Add null check: if (args == null) { throw new IllegalArgumentException(\"Parameter cannot be null\"); }",
      "message": "Missing null check for parameters: args"
    }
  ],
  "sensitiveDataExposures": [],
  "timestamp": 1748377909307,
  "overlyBroadCatches": [],
  "statistics": {
    "inefficientListOperations": 0,
    "assignments": 3,
    "potentialLogInjections": 3,
    "constructorNamingIssues": 0,
    "controlFlowNodes": 2,
    "methodCalls": 10,
    "missingInputValidations": 5,
    "stringLiterals": 7,
    "sensitiveDataExposures": 0,
    "totalEdges": 41,
    "totalNodes": 42,
    "overlyBroadCatches": 0
  }
}