import { useState } from "react";
import { ChevronDown, ChevronRight, AlertTriangle, Info, FileText, MapPin } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import type { Vulnerability } from "@shared/schema";

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
}

export default function VulnerabilityCard({ vulnerability }: VulnerabilityCardProps) {
  const [isOpen, setIsOpen] = useState(false);

  const getSeverityConfig = (severity: string) => {
    const configs = {
      critical: {
        color: 'bg-critical text-white',
        bgColor: 'bg-red-50 border-red-200',
        icon: <AlertTriangle className="w-4 h-4" />
      },
      high: {
        color: 'bg-high text-white',
        bgColor: 'bg-orange-50 border-orange-200',
        icon: <AlertTriangle className="w-4 h-4" />
      },
      medium: {
        color: 'bg-medium text-white',
        bgColor: 'bg-yellow-50 border-yellow-200',
        icon: <Info className="w-4 h-4" />
      },
      low: {
        color: 'bg-low text-white',
        bgColor: 'bg-green-50 border-green-200',
        icon: <Info className="w-4 h-4" />
      }
    };
    return configs[severity as keyof typeof configs] || configs.low;
  };

  const config = getSeverityConfig(vulnerability.severity);

  return (
    <Card className={`border rounded-lg ${config.bgColor}`}>
      <CardContent className="p-4">
        <Collapsible open={isOpen} onOpenChange={setIsOpen}>
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <div className="flex items-center space-x-2 mb-2">
                <Badge className={`text-xs font-medium ${config.color}`}>
                  {config.icon}
                  <span className="ml-1 capitalize">{vulnerability.severity}</span>
                </Badge>
                <span className="font-semibold text-gray-900">{vulnerability.title}</span>
                <span className="text-sm text-gray-500">{vulnerability.category}</span>
              </div>
              
              <p className="text-sm text-gray-700 mb-2">
                {vulnerability.description}
              </p>
              
              <div className="flex items-center space-x-4 text-xs text-gray-600">
                <div className="flex items-center">
                  <FileText className="w-3 h-3 mr-1" />
                  <span className="font-medium">File:</span>
                  <span className="ml-1">file-{vulnerability.fileId}</span>
                </div>
                <div className="flex items-center">
                  <MapPin className="w-3 h-3 mr-1" />
                  <span className="font-medium">Line:</span>
                  <span className="ml-1">{vulnerability.line}</span>
                  {vulnerability.column && (
                    <>
                      <span className="ml-1">Column:</span>
                      <span className="ml-1">{vulnerability.column}</span>
                    </>
                  )}
                </div>
              </div>
            </div>
            
            <CollapsibleTrigger asChild>
              <Button variant="ghost" size="sm" className="ml-4">
                {isOpen ? (
                  <ChevronDown className="w-4 h-4" />
                ) : (
                  <ChevronRight className="w-4 h-4" />
                )}
                <span className="ml-1 text-sm">
                  {isOpen ? 'Hide' : 'Show'} Details
                </span>
              </Button>
            </CollapsibleTrigger>
          </div>

          <CollapsibleContent className="mt-4 pt-4 border-t border-gray-200">
            <div className="space-y-4">
              {/* Code Snippet */}
              {vulnerability.code && (
                <div>
                  <h4 className="text-sm font-semibold text-gray-900 mb-2">Code Context</h4>
                  <div className="bg-gray-900 text-gray-100 rounded-lg p-3 overflow-x-auto">
                    <code className="text-sm font-mono whitespace-pre">
                      {vulnerability.code}
                    </code>
                  </div>
                </div>
              )}

              {/* Detailed Description */}
              <div>
                <h4 className="text-sm font-semibold text-gray-900 mb-2">Vulnerability Details</h4>
                <p className="text-sm text-gray-700">
                  {vulnerability.description}
                </p>
              </div>

              {/* Recommendation */}
              {vulnerability.recommendation && (
                <div>
                  <h4 className="text-sm font-semibold text-gray-900 mb-2">Recommended Fix</h4>
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                    <p className="text-sm text-blue-800">
                      {vulnerability.recommendation}
                    </p>
                  </div>
                </div>
              )}

              {/* Rule Information */}
              <div>
                <h4 className="text-sm font-semibold text-gray-900 mb-2">Rule Information</h4>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600">Rule ID:</span>
                    <span className="font-medium ml-2">{vulnerability.ruleId}</span>
                  </div>
                  <div>
                    <span className="text-gray-600">Category:</span>
                    <span className="font-medium ml-2">{vulnerability.category}</span>
                  </div>
                  <div>
                    <span className="text-gray-600">Severity:</span>
                    <Badge className={`ml-2 text-xs ${config.color}`}>
                      {vulnerability.severity}
                    </Badge>
                  </div>
                  <div>
                    <span className="text-gray-600">Location:</span>
                    <span className="font-medium ml-2">
                      Line {vulnerability.line}
                      {vulnerability.column && `, Column ${vulnerability.column}`}
                    </span>
                  </div>
                </div>
              </div>

              {/* Impact Assessment */}
              <div>
                <h4 className="text-sm font-semibold text-gray-900 mb-2">Impact Assessment</h4>
                <div className={`rounded-lg p-3 ${config.bgColor}`}>
                  <p className="text-sm">
                    {vulnerability.severity === 'critical' && 
                      'This vulnerability poses a critical security risk and should be addressed immediately. It could lead to complete system compromise.'
                    }
                    {vulnerability.severity === 'high' && 
                      'This vulnerability poses a high security risk and should be addressed as soon as possible. It could lead to significant security breaches.'
                    }
                    {vulnerability.severity === 'medium' && 
                      'This vulnerability poses a moderate security risk and should be addressed in the next development cycle.'
                    }
                    {vulnerability.severity === 'low' && 
                      'This vulnerability poses a low security risk but should still be addressed to maintain good security practices.'
                    }
                  </p>
                </div>
              </div>
            </div>
          </CollapsibleContent>
        </Collapsible>
      </CardContent>
    </Card>
  );
}
