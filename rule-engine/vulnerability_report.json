{
  "scan_info": {
    "scan_id": "7eff4746-db40-428c-af38-a8a202f12b3a",
    "timestamp": "2025-06-12T01:06:46.713239",
    "source_directory": "../test",
    "scan_duration_seconds": 349.036108,
    "total_files_processed": 3,
    "total_rules_loaded": 522,
    "total_vulnerabilities": 17
  },
  "summary": {
    "severity_breakdown": {
      "WARNING": 13,
      "ERROR": 4
    },
    "category_breakdown": {
      "security": 17
    },
    "files_with_issues": 2,
    "top_vulnerable_files": {
      "test.py": 11,
      "SQLi.java": 6
    }
  },
  "vulnerabilities": [
    {
      "rule_id": "java.lang.security.audit.crypto.use-of-md5.use-of-md5",
      "category": "security",
      "severity": "WARNING",
      "location": "SQLi.java:25:58",
      "details": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/SQLi.java",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "java.lang.security.audit.crypto.use-of-md5.use-of-md5",
          "path": "/tmp/tmpfy1_j9nz/source.java",
          "start": {
            "line": 25,
            "col": 58,
            "offset": 847
          },
          "end": {
            "line": 25,
            "col": 63,
            "offset": 852
          },
          "extra": {
            "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.",
            "fix": "\"SHA-512\"",
            "metadata": {
              "functional-categories": [
                "crypto::search::hash-algorithm::java.security"
              ],
              "owasp": [
                "A03:2017 - Sensitive Data Exposure",
                "A02:2021 - Cryptographic Failures"
              ],
              "cwe": [
                "CWE-328: Use of Weak Hash"
              ],
              "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5",
              "category": "security",
              "technology": [
                "java"
              ],
              "references": [
                "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
              ],
              "subcategory": [
                "vuln"
              ],
              "likelihood": "MEDIUM",
              "impact": "MEDIUM",
              "confidence": "HIGH",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Insecure Hashing Algorithm"
              ],
              "source": "https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5.use-of-md5",
              "shortlink": "https://sg.run/ryJn"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-328: Use of Weak Hash",
      "owasp_category": "A03:2017 - Sensitive Data Exposure",
      "confidence": "HIGH",
      "file_hash": "2c789d06a0178252093df07465622795",
      "line_number": 25,
      "column_number": 58,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
      "category": "security",
      "severity": "WARNING",
      "location": "SQLi.java:27:13",
      "details": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/SQLi.java",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
          "path": "/tmp/tmpfy1_j9nz/source.java",
          "start": {
            "line": 27,
            "col": 13,
            "offset": 925
          },
          "end": {
            "line": 27,
            "col": 87,
            "offset": 999
          },
          "extra": {
            "message": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.",
            "metadata": {
              "likelihood": "HIGH",
              "impact": "MEDIUM",
              "confidence": "MEDIUM",
              "category": "security",
              "cwe": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
              ],
              "cwe2021-top25": true,
              "cwe2022-top25": true,
              "owasp": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
              ],
              "references": [
                "https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html"
              ],
              "subcategory": [
                "vuln"
              ],
              "technology": [
                "java",
                "servlets"
              ],
              "interfile": true,
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Cross-Site-Scripting (XSS)"
              ],
              "source": "https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
              "shortlink": "https://sg.run/KlRL"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "owasp_category": "A07:2017 - Cross-Site Scripting (XSS)",
      "confidence": "MEDIUM",
      "file_hash": "23e0cf48c7b0dd6bde13a3ac32de718d",
      "line_number": 27,
      "column_number": 13,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request",
      "category": "security",
      "severity": "WARNING",
      "location": "SQLi.java:38:13",
      "details": "Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/SQLi.java",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request",
          "path": "/tmp/tmpfy1_j9nz/source.java",
          "start": {
            "line": 38,
            "col": 13,
            "offset": 1426
          },
          "end": {
            "line": 38,
            "col": 36,
            "offset": 1449
          },
          "extra": {
            "message": "Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.",
            "metadata": {
              "likelihood": "HIGH",
              "impact": "MEDIUM",
              "confidence": "HIGH",
              "category": "security",
              "cwe": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
              ],
              "cwe2021-top25": true,
              "cwe2022-top25": true,
              "owasp": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
              ],
              "references": [
                "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                "https://owasp.org/www-community/attacks/SQL_Injection"
              ],
              "subcategory": [
                "vuln"
              ],
              "technology": [
                "sql",
                "java",
                "servlets",
                "spring"
              ],
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "SQL Injection"
              ],
              "source": "https://semgrep.dev/r/java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request",
              "shortlink": "https://sg.run/Lg56"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
      "owasp_category": "A01:2017 - Injection",
      "confidence": "HIGH",
      "file_hash": "ddde4b1a5632266b72c5b44fd2fb6b01",
      "line_number": 38,
      "column_number": 13,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
      "category": "security",
      "severity": "WARNING",
      "location": "SQLi.java:49:9",
      "details": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/SQLi.java",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
          "path": "/tmp/tmpfy1_j9nz/source.java",
          "start": {
            "line": 49,
            "col": 9,
            "offset": 1780
          },
          "end": {
            "line": 49,
            "col": 50,
            "offset": 1821
          },
          "extra": {
            "message": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.",
            "metadata": {
              "likelihood": "HIGH",
              "impact": "MEDIUM",
              "confidence": "MEDIUM",
              "category": "security",
              "cwe": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
              ],
              "cwe2021-top25": true,
              "cwe2022-top25": true,
              "owasp": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
              ],
              "references": [
                "https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html"
              ],
              "subcategory": [
                "vuln"
              ],
              "technology": [
                "java",
                "servlets"
              ],
              "interfile": true,
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Cross-Site-Scripting (XSS)"
              ],
              "source": "https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
              "shortlink": "https://sg.run/KlRL"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "owasp_category": "A07:2017 - Cross-Site Scripting (XSS)",
      "confidence": "MEDIUM",
      "file_hash": "4742ff17915bc2b43507a076c7b29ef7",
      "line_number": 49,
      "column_number": 9,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
      "category": "security",
      "severity": "WARNING",
      "location": "SQLi.java:96:17",
      "details": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/SQLi.java",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
          "path": "/tmp/tmpfy1_j9nz/source.java",
          "start": {
            "line": 96,
            "col": 17,
            "offset": 3583
          },
          "end": {
            "line": 96,
            "col": 49,
            "offset": 3615
          },
          "extra": {
            "message": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.",
            "metadata": {
              "likelihood": "HIGH",
              "impact": "MEDIUM",
              "confidence": "MEDIUM",
              "category": "security",
              "cwe": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
              ],
              "cwe2021-top25": true,
              "cwe2022-top25": true,
              "owasp": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
              ],
              "references": [
                "https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html"
              ],
              "subcategory": [
                "vuln"
              ],
              "technology": [
                "java",
                "servlets"
              ],
              "interfile": true,
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Cross-Site-Scripting (XSS)"
              ],
              "source": "https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer",
              "shortlink": "https://sg.run/KlRL"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "owasp_category": "A07:2017 - Cross-Site Scripting (XSS)",
      "confidence": "MEDIUM",
      "file_hash": "07aff17a522c86ad43c06a86bb3319e2",
      "line_number": 96,
      "column_number": 17,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
      "category": "security",
      "severity": "ERROR",
      "location": "SQLi.java:113:13",
      "details": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/SQLi.java",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "java.lang.security.audit.formatted-sql-string.formatted-sql-string",
          "path": "/tmp/tmpfy1_j9nz/source.java",
          "start": {
            "line": 113,
            "col": 13,
            "offset": 4152
          },
          "end": {
            "line": 113,
            "col": 76,
            "offset": 4215
          },
          "extra": {
            "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.",
            "metadata": {
              "cwe": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
              ],
              "owasp": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
              ],
              "source-rule-url": "https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION",
              "asvs": {
                "control_id": "5.3.5 Injection",
                "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements",
                "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                "version": "4"
              },
              "references": [
                "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
                "https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps",
                "https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"
              ],
              "category": "security",
              "technology": [
                "java"
              ],
              "cwe2022-top25": true,
              "cwe2021-top25": true,
              "subcategory": [
                "vuln"
              ],
              "likelihood": "HIGH",
              "impact": "MEDIUM",
              "confidence": "MEDIUM",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "SQL Injection"
              ],
              "source": "https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string",
              "shortlink": "https://sg.run/OPXp"
            },
            "severity": "ERROR",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
      "owasp_category": "A01:2017 - Injection",
      "confidence": "MEDIUM",
      "file_hash": "422d8526cb7bf768c7295d42d0ce52ce",
      "line_number": 113,
      "column_number": 13,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
      "category": "security",
      "severity": "WARNING",
      "location": "test.py:15:12",
      "details": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/test.py",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
          "path": "/tmp/tmpwtll2fpm/source.py",
          "start": {
            "line": 15,
            "col": 12,
            "offset": 297
          },
          "end": {
            "line": 15,
            "col": 37,
            "offset": 322
          },
          "extra": {
            "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.",
            "metadata": {
              "source-rule-url": "https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59",
              "cwe": [
                "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
              ],
              "owasp": [
                "A03:2017 - Sensitive Data Exposure",
                "A02:2021 - Cryptographic Failures"
              ],
              "bandit-code": "B303",
              "asvs": {
                "control_id": "6.2.2 Insecure Custom Algorithm",
                "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms",
                "section": "V6 Stored Cryptography Verification Requirements",
                "version": "4"
              },
              "references": [
                "https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html",
                "https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability",
                "http://2012.sharcs.org/slides/stevens.pdf",
                "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html"
              ],
              "category": "security",
              "technology": [
                "python"
              ],
              "subcategory": [
                "vuln"
              ],
              "likelihood": "LOW",
              "impact": "MEDIUM",
              "confidence": "MEDIUM",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Cryptographic Issues"
              ],
              "source": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5",
              "shortlink": "https://sg.run/vYrY"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
      "owasp_category": "A03:2017 - Sensitive Data Exposure",
      "confidence": "MEDIUM",
      "file_hash": "ba5e2be27f39051d336ca256c66b9fdf",
      "line_number": 15,
      "column_number": 12,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
      "category": "security",
      "severity": "WARNING",
      "location": "test.py:20:5",
      "details": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/test.py",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
          "path": "/tmp/tmpwtll2fpm/source.py",
          "start": {
            "line": 20,
            "col": 5,
            "offset": 455
          },
          "end": {
            "line": 25,
            "col": 26,
            "offset": 693
          },
          "extra": {
            "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
            "metadata": {
              "cwe": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
              ],
              "owasp": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
              ],
              "references": [
                "https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"
              ],
              "category": "security",
              "technology": [
                "django"
              ],
              "cwe2022-top25": true,
              "cwe2021-top25": true,
              "subcategory": [
                "vuln"
              ],
              "likelihood": "MEDIUM",
              "impact": "HIGH",
              "confidence": "MEDIUM",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "SQL Injection"
              ],
              "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
              "shortlink": "https://sg.run/qx7y"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
      "owasp_category": "A01:2017 - Injection",
      "confidence": "MEDIUM",
      "file_hash": "54310250e9e0c63e50cd08bf41c480f4",
      "line_number": 20,
      "column_number": 5,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
      "category": "security",
      "severity": "WARNING",
      "location": "test.py:21:5",
      "details": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/test.py",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
          "path": "/tmp/tmpwtll2fpm/source.py",
          "start": {
            "line": 21,
            "col": 5,
            "offset": 491
          },
          "end": {
            "line": 25,
            "col": 26,
            "offset": 693
          },
          "extra": {
            "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.",
            "metadata": {
              "cwe": [
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
              ],
              "owasp": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
              ],
              "references": [
                "https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"
              ],
              "category": "security",
              "technology": [
                "django"
              ],
              "cwe2022-top25": true,
              "cwe2021-top25": true,
              "subcategory": [
                "vuln"
              ],
              "likelihood": "MEDIUM",
              "impact": "HIGH",
              "confidence": "MEDIUM",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "SQL Injection"
              ],
              "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute",
              "shortlink": "https://sg.run/qx7y"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
      "owasp_category": "A01:2017 - Injection",
      "confidence": "MEDIUM",
      "file_hash": "080a075784428d7c34e6235d601b4f54",
      "line_number": 21,
      "column_number": 5,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "python.flask.security.injection.tainted-sql-string.tainted-sql-string",
      "category": "security",
      "severity": "ERROR",
      "location": "test.py:24:13",
      "details": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/test.py",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "python.flask.security.injection.tainted-sql-string.tainted-sql-string",
          "path": "/tmp/tmpwtll2fpm/source.py",
          "start": {
            "line": 24,
            "col": 13,
            "offset": 600
          },
          "end": {
            "line": 24,
            "col": 80,
            "offset": 667
          },
          "extra": {
            "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.",
            "metadata": {
              "cwe": [
                "CWE-704: Incorrect Type Conversion or Cast"
              ],
              "owasp": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
              ],
              "references": [
                "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
                "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
                "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
              ],
              "category": "security",
              "technology": [
                "sqlalchemy",
                "flask"
              ],
              "subcategory": [
                "vuln"
              ],
              "impact": "MEDIUM",
              "likelihood": "MEDIUM",
              "confidence": "MEDIUM",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Improper Validation"
              ],
              "source": "https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string",
              "shortlink": "https://sg.run/JxZj"
            },
            "severity": "ERROR",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-704: Incorrect Type Conversion or Cast",
      "owasp_category": "A01:2017 - Injection",
      "confidence": "MEDIUM",
      "file_hash": "c50911e2af7bc39165548acf43126f37",
      "line_number": 24,
      "column_number": 13,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "python.lang.security.dangerous-system-call.dangerous-system-call",
      "category": "security",
      "severity": "ERROR",
      "location": "test.py:33:12",
      "details": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/test.py",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "python.lang.security.dangerous-system-call.dangerous-system-call",
          "path": "/tmp/tmpwtll2fpm/source.py",
          "start": {
            "line": 33,
            "col": 12,
            "offset": 910
          },
          "end": {
            "line": 33,
            "col": 41,
            "offset": 939
          },
          "extra": {
            "message": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.",
            "metadata": {
              "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html",
              "cwe": [
                "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
              ],
              "owasp": [
                "A01:2017 - Injection",
                "A03:2021 - Injection"
              ],
              "references": [
                "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"
              ],
              "asvs": {
                "control_id": "5.2.4 Dyanmic Code Execution Features",
                "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements",
                "section": "V5: Validation, Sanitization and Encoding Verification Requirements",
                "version": "4"
              },
              "category": "security",
              "technology": [
                "python"
              ],
              "confidence": "MEDIUM",
              "cwe2022-top25": true,
              "cwe2021-top25": true,
              "subcategory": [
                "vuln"
              ],
              "likelihood": "HIGH",
              "impact": "HIGH",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Command Injection"
              ],
              "source": "https://semgrep.dev/r/python.lang.security.dangerous-system-call.dangerous-system-call",
              "shortlink": "https://sg.run/k0W7"
            },
            "severity": "ERROR",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "owasp_category": "A01:2017 - Injection",
      "confidence": "MEDIUM",
      "file_hash": "ffa99c72dc0341c747fe6af0a2c71133",
      "line_number": 33,
      "column_number": 12,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
      "category": "security",
      "severity": "WARNING",
      "location": "test.py:46:5",
      "details": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/test.py",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
          "path": "/tmp/tmpwtll2fpm/source.py",
          "start": {
            "line": 46,
            "col": 5,
            "offset": 1242
          },
          "end": {
            "line": 46,
            "col": 36,
            "offset": 1273
          },
          "extra": {
            "message": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.",
            "metadata": {
              "cwe": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
              ],
              "owasp": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
              ],
              "category": "security",
              "technology": [
                "flask"
              ],
              "references": [
                "https://owasp.org/Top10/A03_2021-Injection"
              ],
              "cwe2022-top25": true,
              "cwe2021-top25": true,
              "subcategory": [
                "vuln"
              ],
              "likelihood": "HIGH",
              "impact": "MEDIUM",
              "confidence": "MEDIUM",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Cross-Site-Scripting (XSS)"
              ],
              "source": "https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
              "shortlink": "https://sg.run/Zv6o"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "owasp_category": "A07:2017 - Cross-Site Scripting (XSS)",
      "confidence": "MEDIUM",
      "file_hash": "9553b669f5c7e28823627fffd1c86df6",
      "line_number": 46,
      "column_number": 5,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "python.django.security.injection.raw-html-format.raw-html-format",
      "category": "security",
      "severity": "WARNING",
      "location": "test.py:46:12",
      "details": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/test.py",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "python.django.security.injection.raw-html-format.raw-html-format",
          "path": "/tmp/tmpwtll2fpm/source.py",
          "start": {
            "line": 46,
            "col": 12,
            "offset": 1249
          },
          "end": {
            "line": 46,
            "col": 36,
            "offset": 1273
          },
          "extra": {
            "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.",
            "metadata": {
              "cwe": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
              ],
              "owasp": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
              ],
              "category": "security",
              "technology": [
                "django"
              ],
              "references": [
                "https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render",
                "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"
              ],
              "cwe2022-top25": true,
              "cwe2021-top25": true,
              "subcategory": [
                "vuln"
              ],
              "likelihood": "HIGH",
              "impact": "MEDIUM",
              "confidence": "MEDIUM",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Cross-Site-Scripting (XSS)"
              ],
              "source": "https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format",
              "shortlink": "https://sg.run/oYj1"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "owasp_category": "A07:2017 - Cross-Site Scripting (XSS)",
      "confidence": "MEDIUM",
      "file_hash": "2e2c7d808136a64c7b82620b7ee0302e",
      "line_number": 46,
      "column_number": 12,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "python.flask.security.injection.raw-html-concat.raw-html-format",
      "category": "security",
      "severity": "WARNING",
      "location": "test.py:46:12",
      "details": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/test.py",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "python.flask.security.injection.raw-html-concat.raw-html-format",
          "path": "/tmp/tmpwtll2fpm/source.py",
          "start": {
            "line": 46,
            "col": 12,
            "offset": 1249
          },
          "end": {
            "line": 46,
            "col": 36,
            "offset": 1273
          },
          "extra": {
            "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.",
            "metadata": {
              "cwe": [
                "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
              ],
              "owasp": [
                "A07:2017 - Cross-Site Scripting (XSS)",
                "A03:2021 - Injection"
              ],
              "category": "security",
              "technology": [
                "flask"
              ],
              "references": [
                "https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"
              ],
              "cwe2022-top25": true,
              "cwe2021-top25": true,
              "subcategory": [
                "vuln"
              ],
              "likelihood": "MEDIUM",
              "impact": "MEDIUM",
              "confidence": "MEDIUM",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Cross-Site-Scripting (XSS)"
              ],
              "source": "https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format",
              "shortlink": "https://sg.run/Pb7e"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "owasp_category": "A07:2017 - Cross-Site Scripting (XSS)",
      "confidence": "MEDIUM",
      "file_hash": "d734de0bdbafb986e8640e5d114ae712",
      "line_number": 46,
      "column_number": 12,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open",
      "category": "security",
      "severity": "WARNING",
      "location": "test.py:51:5",
      "details": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/test.py",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open",
          "path": "/tmp/tmpwtll2fpm/source.py",
          "start": {
            "line": 51,
            "col": 5,
            "offset": 1390
          },
          "end": {
            "line": 53,
            "col": 24,
            "offset": 1484
          },
          "extra": {
            "message": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.",
            "metadata": {
              "cwe": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
              ],
              "owasp": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
              ],
              "references": [
                "https://owasp.org/www-community/attacks/Path_Traversal"
              ],
              "category": "security",
              "technology": [
                "django"
              ],
              "cwe2022-top25": true,
              "cwe2021-top25": true,
              "subcategory": [
                "vuln"
              ],
              "likelihood": "MEDIUM",
              "impact": "MEDIUM",
              "confidence": "MEDIUM",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Path Traversal"
              ],
              "source": "https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open",
              "shortlink": "https://sg.run/W8qg"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "owasp_category": "A05:2017 - Broken Access Control",
      "confidence": "MEDIUM",
      "file_hash": "02444a017794620c326ba3e0d5615fa9",
      "line_number": 51,
      "column_number": 5,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "python.flask.security.injection.path-traversal-open.path-traversal-open",
      "category": "security",
      "severity": "ERROR",
      "location": "test.py:52:10",
      "details": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/test.py",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "python.flask.security.injection.path-traversal-open.path-traversal-open",
          "path": "/tmp/tmpwtll2fpm/source.py",
          "start": {
            "line": 52,
            "col": 10,
            "offset": 1435
          },
          "end": {
            "line": 52,
            "col": 29,
            "offset": 1454
          },
          "extra": {
            "message": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.",
            "metadata": {
              "cwe": [
                "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
              ],
              "owasp": [
                "A05:2017 - Broken Access Control",
                "A01:2021 - Broken Access Control"
              ],
              "references": [
                "https://owasp.org/www-community/attacks/Path_Traversal"
              ],
              "category": "security",
              "technology": [
                "flask"
              ],
              "cwe2022-top25": true,
              "cwe2021-top25": true,
              "subcategory": [
                "audit"
              ],
              "likelihood": "MEDIUM",
              "impact": "HIGH",
              "confidence": "MEDIUM",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Path Traversal"
              ],
              "source": "https://semgrep.dev/r/python.flask.security.injection.path-traversal-open.path-traversal-open",
              "shortlink": "https://sg.run/PJRW"
            },
            "severity": "ERROR",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "owasp_category": "A05:2017 - Broken Access Control",
      "confidence": "MEDIUM",
      "file_hash": "e2ee23d8289d01fd057e2b023bf3c257",
      "line_number": 52,
      "column_number": 10,
      "code_snippet": "requires login"
    },
    {
      "rule_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "category": "security",
      "severity": "WARNING",
      "location": "test.py:56:5",
      "details": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
      "remediation": "No remediation provided",
      "context": {
        "file_path": "../test/test.py",
        "code": "requires login",
        "semgrep_finding": {
          "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
          "path": "/tmp/tmpwtll2fpm/source.py",
          "start": {
            "line": 56,
            "col": 5,
            "offset": 1517
          },
          "end": {
            "line": 56,
            "col": 24,
            "offset": 1536
          },
          "extra": {
            "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
            "metadata": {
              "cwe": [
                "CWE-489: Active Debug Code"
              ],
              "owasp": "A06:2017 - Security Misconfiguration",
              "references": [
                "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
              ],
              "category": "security",
              "technology": [
                "flask"
              ],
              "subcategory": [
                "vuln"
              ],
              "likelihood": "HIGH",
              "impact": "MEDIUM",
              "confidence": "HIGH",
              "license": "Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license",
              "vulnerability_class": [
                "Active Debug Code"
              ],
              "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
              "shortlink": "https://sg.run/dKrd"
            },
            "severity": "WARNING",
            "fingerprint": "requires login",
            "lines": "requires login",
            "validation_state": "NO_VALIDATOR",
            "engine_kind": "OSS"
          }
        }
      },
      "cwe_id": "CWE-489: Active Debug Code",
      "owasp_category": "A06:2017 - Security Misconfiguration",
      "confidence": "HIGH",
      "file_hash": "0b5d47d296755e93eb485744f29c3268",
      "line_number": 56,
      "column_number": 5,
      "code_snippet": "requires login"
    }
  ],
  "recommendations": [
    {
      "priority": "GENERAL",
      "recommendation": "Improve secure coding practices",
      "action_items": [
        "Conduct security code reviews",
        "Implement static analysis in CI/CD pipeline",
        "Provide secure coding training for developers"
      ]
    }
  ],
  "compliance": {
    "OWASP": {
      "covered": 5,
      "total": 10,
      "categories": {
        "A03:2017 - Sensitive Data Exposure": 2,
        "A07:2017 - Cross-Site Scripting (XSS)": 6,
        "A01:2017 - Injection": 6,
        "A05:2017 - Broken Access Control": 2,
        "A06:2017 - Security Misconfiguration": 1
      }
    },
    "CWE": {
      "covered": 8,
      "total": 25,
      "weaknesses": {
        "CWE-328: Use of Weak Hash": 1,
        "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')": 6,
        "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')": 4,
        "CWE-327: Use of a Broken or Risky Cryptographic Algorithm": 1,
        "CWE-704: Incorrect Type Conversion or Cast": 1,
        "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')": 1,
        "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')": 2,
        "CWE-489: Active Debug Code": 1
      }
    }
  }
}