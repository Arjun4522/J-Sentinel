package com.example.api_gateway.controller;

import com.example.api_gateway.service.VulnerabilityScanService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Mono;

import java.util.Map;

@RestController
@RequestMapping("/api/scan")
public class VulnerabilityScanController {

    private final VulnerabilityScanService scanService;

    public VulnerabilityScanController(VulnerabilityScanService scanService) {
        this.scanService = scanService;
    }

    @PostMapping("/trigger")
    public Mono<ResponseEntity<Map<String, Object>>> triggerScan(
            @RequestBody Map<String, Object> scanConfig) {
        return scanService.triggerScan(scanConfig)
                .map(ResponseEntity::ok)
                .onErrorResume(e -> Mono.just(ResponseEntity.internalServerError().body(
                        Map.of("error", e.getMessage())
                )));
    }

    /*
    @GetMapping("/status/{scanId}")
    public Mono<ResponseEntity<Map<String, Object>>> getScanStatus(
            @PathVariable String scanId) {
        return scanService.getScanStatus(scanId)
                .map(ResponseEntity::ok)
                .defaultIfEmpty(ResponseEntity.notFound().build());
    }

    @GetMapping("/report/{scanId}")
    public Mono<ResponseEntity<Map<String, Object>>> getScanReport(
            @PathVariable String scanId) {
        return scanService.getScanReport(scanId)
                .map(ResponseEntity::ok)
                .defaultIfEmpty(ResponseEntity.notFound().build());
    }
    */
}